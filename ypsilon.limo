; -*- scheme -*-

(define (fix-rec f)
  (lambda x (apply f (cons (fix-rec f) x))))

(define (z-fix f)
  ((lambda (x) (lambda v (apply f (cons (x x) v))))
   (lambda (x) (lambda v (apply f (cons (x x) v))))))

(define (factorial f n)
  (if (= 0 n)
      1
      (* n (f (- n 1)))))

{
  def fac(f, n) {
    if (n==0)
      1;
    else
      n * f(n - 1);
  }
}

(define (factorial-end f n akku)
  (if (= n 0)
      akku
      (f (- n 1) (* n akku))))

;; anonymous recursion:
(write
 ((z-fix (lambda (f n)
	   (if (= n 0) 1 (* n (f (- n 1)))))) 6))

; Z = λf.(λx.f (λv.((x x) v))) 
;        (λx.f (λv.((x x) v)))

; Y = λf.(λx.f (x x)) (λx.f (x x)) ; original haskell curry
