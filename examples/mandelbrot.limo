(mod-load "sdl")
(mod-load "vector")

(defun vector-from-list (l)
  (let ((v (make-vector (list-length l))))
    (for-each n (drange 0 (list-length l) 1)
      (vector-set v n (car l))
      (setf l (cdr l)))
    v))

(setq *surface* ([_sdl . sdl-setvideomode] 640 480 24 [_sdl . sdl_hwsurface]))

(defun bit (n v)
  (mod (floor (/ v n)) 2))

;; create a map of colors
(setq *colors* (vector-from-list (map (lambda (n) ([_sdl . sdl-surface-rgbpcolor]
					      *surface*
					      (* 255 (bit 1 n))
					      (* 255 (bit 2 n))
					      (* 255 (bit 4 n))))
				      (range 0 17 1))))

(defun csqr (c)
  (cons (- (power (car c) 2)
	      (power (cdr c) 2))
	(* 2 (car c) (cdr c))))
(freezeq csqr)

(defun cadd (a b)
  (cons (+ (car a) (car b))
	(+ (cdr a) (cdr b))))
(freezeq cadd)

(defun mandelbrot (x y)
  (block fun
    (progn
     (setq z (cons x y))
     (for-each n (drange 0 16 1)
       (if (>= (+ (power (car z) 2.) (power (cdr z) 2.)) 4.)
	   (return-from fun n)
	   (setf z (cadd (csqr z) (cons x y)))))
     16.)))
(freezeq mandelbrot)

(defun main ()
  (for-each y (drange 0 480 1)
    (for-each x (drange 0 640 1)
      ([_sdl . sdl-plot] 
       *surface*
       (cons x y)
       (vector-ref *colors*
		   (mandelbrot (/ (- x 320.) 128.) (/ (- y 240.) 128.)))))
    ([_sdl . sdl-flip] *surface*)))

(main)
;; (print "press RET to quit\n")
;; (file-getc stdin)
