;;;;; VERSION: 2023-03-17
;;;;; I ported this from https://github.com/tytso/pwgen as best as I could
;;;;; hi Theodore Ts'o!  o/
;;;;; kinda slow

(import "random.limo")
(import "tagbody.limo")

(defun upcase-initials (s)
  (let ((sl (string-to-list s)))
    (list-to-string
     (undyn (cons (chr (+ (ord "A")
                          (- (ord (car sl))
                             (ord "a"))))
                  (cdr sl))))))

(defun pwgen (len pw-flags)
  (when (not len) (setf len 8))     ;; default value for length
  (when (not pw-flags) (setf pw-flags '(:PW-UPPERS :PW-AMBIGUOUS :PW-DIGITS :PW-SYMBOLS)))

  (let ((res ""))
    
    (tagbody
     try-again

     (setf res "")
     
     (let ((phonemes '(("a" :VOWEL)
                       ("ae" :VOWEL :DIPHTONG)
                       ("ah" :VOWEL :DIPHTONG)
                       ("ai" :VOWEL :DIPHTONG)
                       ("b" :CONSONANT)
                       ("c" :CONSONANT)
                       ("ch" :CONSONANT :DIPHTONG)
                       ("d" :CONSONANT)
                       ("e" :VOWEL)
                       ("ee" :VOWEL :DIPHTONG)
                       ("ei" :VOWEL :DIPHTONG)
                       ("f" :CONSONANT)
                       ("g" :CONSONANT)
                       ("gh" :CONSONANT :DIPHTONG :NOT-FIRST)
                       ("h" :CONSONANT)
                       ("i" :VOWEL)
                       ("ie" :VOWEL :DIPHTONG)
                       ("j" :CONSONANT)
                       ("k" :CONSONANT)
                       ("l" :CONSONANT)
                       ("m" :CONSONANT)
                       ("n" :CONSONANT)
                       ("ng" :CONSONANT :DIPHTONG :NOT-FIRST)
                       ("o" :VOWEL)
                       ("oh" :VOWEL :DIPHTONG)
                       ("oo" :VOWEL :DIPHTONG)
                       ("p" :CONSONANT)
                       ("ph" :CONSONANT :DIPHTONG)
                       ("qu" :CONSONANT :DIPHTONG)
                       ("r" :CONSONANT)
                       ("s" :CONSONANT)
                       ("sh" :CONSONANT :DIPHTONG)
                       ("t" :CONSONANT)
                       ("th" :CONSONANT :DIPHTONG)
                       ("u" :VOWEL)
                       ("v" :CONSONANT)
                       ("w" :CONSONANT)
                       ("x" :CONSONANT)
                       ("y" :CONSONANT)
                       ("z" :CONSONANT)))
           (ambiguous (string-to-list "B8G6I1l0OQDS5Z2"))
           (digits "0123456789")
           (symbols "#%&()*+,-./:;<=>?@_~")
           (should-be (if (= 0 (random-byte 2)) :VOWEL :CONSONANT))
           (first :t)
           (prev nil)
           (feature-flags pw-flags)
           (iterations 0))

       (block done
         (progn
          (while (and (< iterations 1000) (<= (string-length res) len))
            (incf iterations)
            (block continue
              (progn
               (let* ((elem (nth (random-byte (list-length phonemes)) phonemes))
                      (flags (cdr elem))
                      (str (car elem)))

                 (when (not (member should-be flags))
                   (return-from continue))

                 (when (and first (member :NOT-FIRST flags))
                   (return-from continue))

                 (when (and (member :VOWEL prev) (member :VOWEL flags) (member :DIPHTONG flags))
                   (return-from continue))

                 (when (> (+ (string-length res) (string-length str)) len)
                   (return-from continue))

                 ;; capitals
                 (when (and (or first (member :CONSONANT flags))
                            (< (random-byte 10) 2))
                   (setf str (upcase-initials str))
                   (setf feature-flags (filter (curry != :PW-UPPERS) feature-flags)))

                 (setf res (string-concat res str))   ;; add string to result

                 (when (member :PW-AMBIGUOUS pw-flags)
                   (for-each c ambiguous
                     (when (member c (string-to-list res))
                       (go try-again))))

                 (when (>= (string-length res) len)
                   (return-from done res))

                 ;; numbers
                 (when (and (member :PW-DIGITS pw-flags)
                            (not first)
                            (< (random-byte 10) 3))
                   (let ((d (string-nth (random-byte 10) digits)))
                     (while (and (member :PW-AMBIGUOUS pw-flags)
                                 (member d ambiguous))
                       (setf d (string-nth (random-byte 10) digits)))
                     (setf res (string-concat res d))
                     (setf feature-flags (filter (curry != :PW-DIGITS) feature-flags))
                     (setf first :t)
                     (setf prev nil)
                     (setf should-be (if (= 0 (random-byte 2)) :VOWEL :CONSONANT))
                     (return-from continue)))

                 ;; symbols
                 (when (and (member :PW-SYMBOLS pw-flags)
                            (not first)
                            (< (random-byte 10) 2))
                   (let ((s (string-nth (random-byte (string-length symbols)) symbols)))
                     (while (and (member :PW-AMBIGUOUS pw-flags)
                                 (member s ambiguous))
                       (setf s (string-nth (random-byte (string-length symbols)) symbols)))
                     (setf res (string-concat res s))
                     (setf feature-flags (filter (curry != :PW-SYMBOLS) feature-flags))))

                 (cond ((eq should-be :CONSONANT)
                        (setf should-be :VOWEL))
                       ((or (member :VOWEL prev)
                            (member :DIPHTONG flags)
                            (> (random-byte 10) 3))
                        (setf should-be :CONSONANT))
                       (:else
                        (setf should-be :VOWEL)))
                 (setf prev flags)
                 (setf first nil)))))))
       
       (when (or (filter (curry != :PW-AMBIGUOUS) feature-flags)
                 (< (string-length res) len))
         (setf res "")
         (go try-again))))
    
    res))

(defun print-pwgen (len)
  (for-each y (mdrange 10)
    (for-each x (mdrange (/ 78 (+ 2 len)))
      (print (pwgen len ()))
      (print "  "))
    (print "\n")))
