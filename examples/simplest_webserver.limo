(import "socket.limo")
(import "file.limo")

;;;; global variables
(setq port 9999)
(setq not-found-page '(:not-found-page . "<html><head><title>404 not found</title></head><body>404 not found</body></html>"))
(setq pages
      '(("/" . "<html>
<head><title>limo simplest-webserver</title></head>
<body>
<h2>limo simplest-webserver!</h2>
Find the example program in the examples directory<br />
<ul>
<li><a href='/subpage1'>a subpage</a> - this is a subpage</li>
<li><a href='/subpage2'>another subpage</a> - this is another subpage</li>
</ul>
</body></html>
")
         ("/subpage1" . "<html>
<head><title>limo simplest-webserver</title></head>
<body>
<h2>limo simplest-webserver!</h2>
<h3>a subpage</h3>
Limo is lispy fun stuff
</body></html>
")
         ("/subpage2" . "<head><title>limo simplest-webserver</title></head>
<body>
<h2>limo simplest-webserver!</h2>
<h3>another subpage</h3>
parentheses! parentheses everywhere!
</body></html>
")))

(setq s ([_socket . make-socket] [_socket . af_inet] [_socket . sock_stream] 0))
([_socket . bind] s ([_socket . make-sockaddr] ([_socket . inet-addr] "0.0.0.0") port))
([_socket . socket-listen] s 2)

(while :forever
  (setq sc ([_socket . socket-accept] s))
  (print "connection accepted\n")
  
  (setq sf (file-fdopen sc "a+"))
  (unify (method address protocol) (string-split (file-readline sf) " "))
  (print (format  "%r\n" (list method address protocol)))
  
  (while (!= "\r\n" (file-readline sf))
    :do-nothing)
  (file-write sf "HTTP/1.0 200 OK\r
Server: simplest-webserver limo/0.0\r
Content-type: text/html; charset=utf-8\r
")
  (let ((page (assoc address pages)))
    (unless page (setf page not-found-page))
    (progn
     (file-write sf (format "Content-length: %n\r\n\r\n" (string-length (cdr page))))
     (file-write sf (cdr page))
     (file-flush sf)
     (file-close sf))))
