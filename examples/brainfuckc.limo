;; brainfuck to limo compiler
;; much faster than brainfuck.limo

(mod-load "vector")

(freezeq vector-ref)
(freezeq vector-set)
(freezeq vector-len)

(setq NCELLS 10000)        ; Anzahl Zellen
(setq cptr (floor (/ NCELLS 2)))       ; Zellenpointer
(setq cells (make-vector NCELLS))       ; Zellen-Array (RAM)
(for-each i (drange 0 (vector-len cells) 1)
  (vector-set cells i 0))

(setq iptr 0)                   ; Instructionpointer
(setq loopstack ())             ; Stack, um Schleifenpositionen zu finden.
      
(setq progfile (file-open (car argv) "r"))
(defun fread (file)
  (setq x (file-getc file))
  (if (!= x "")
      (dcons x (fread file))
      ()))
(setq program-string (list-to-string (fread progfile)))
(setq program (make-vector (string-length program-string)))
(for-each i (drange 0 (string-length program-string) 1)
  (vector-set program i (string-nth i program-string)))

(defun count-op (op num)
  (cond ((and (< iptr (vector-len program))
	      (= (vector-ref program iptr) op))
	 (incf iptr)
	 (count-op op (+ 1 num)))
	(:else
	 (dcons
	  (cond ((= op ">")
		 `(setf cptr (+ ,num cptr)))
		((= op "<")
		 `(setf cptr (- cptr ,num)))
		((= op "+")
		 `(vector-set cells cptr (+ ,num (vector-ref cells cptr))))
		((= op "-")
		 `(vector-set cells cptr (- (vector-ref cells cptr) ,num))))
	  (gen-prog)))))


(defun gen-prog ()
  (when (< iptr (vector-len program))
    (setq op (vector-ref program iptr))
    (cond ((member op '(">" "<" "+" "-"))
	   (incf iptr)
	   (count-op op 1))
	  ((= op ".")
	   (incf iptr)
	   (dcons `(progn (file-write stdout (chr (vector-ref cells cptr)))
 			  (file-flush stdout))
		  (gen-prog)))
	  ((= op ",")
	   (incf iptr)
	   (dcons `(vector-set cells cptr (file-getc stdin))
		  (gen-prog)))
	  ((= op "[")
	   (incf iptr)
	   (dcons `(while (!= 0 (vector-ref cells cptr)) ,@(undyn (gen-prog)))
		  (gen-prog)))
	  ((= op "]")
	   (incf iptr)
	   ())
	  (:else
	   (incf iptr)
	   (gen-prog)))))


(write 'compiling)
(setq iptr 0)
(setq compiled-program (cons 'progn (undyn (gen-prog))))

(write 'running)
(eval compiled-program)
