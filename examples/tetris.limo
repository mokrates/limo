(mod-load "ncurses")

(defun min (a b)
  (if (< a b) a b))

(defun random (n)
  (with-file-open "/dev/urandom" "r" f
    (mod (ord (file-getc f)) n)))

;; copied the tetrominoes from
;; https://tetris.wiki/Nintendo_Rotation_System
(setq *tetrominoes* '((((() () () ())       ;; I
			(() () () ())
			(:t :t :t :t)
			(() () () ()))
		       
		       ((() () :t ())       ;; -
			(() () :t ())
			(() () :t ())
			(() () :t ())))
		      
		      (((:t :t)                 ;; block
			(:t :t)))
		      
		      (((() () ())           ;; L
			(:t :t :t)
			(() () :t))
		       ((() :t ())
			(() :t ())
			(:t :t ()))
		       ((:t () ())
			(:t :t :t)
			(() () ()))
		       ((() :t :t)
			(() :t ())
			(() :t ())))
		      
		      (((() () ())      ;; left-hand-L
			(:t :t :t)
			(:t () ()))
		       ((:t :t ())
			(() :t ())
			(() :t ()))
		       ((() () :t)
			(:t :t :t)
			(() () ()))
		       ((() :t ())
			(() :t ())
			(() :t :t )))
		      
		      (((() () ())     ;; s
			(() :t :t)
			(:t :t ()))
		       ((() :t ())
			(() :t :t)
			(() () :t)))
		      
		      (((() () ())    ;; T
			(:t :t :t)
			(() :t ()))
		       ((() :t ())
			(:t :t ())
			(() :t ()))
		       ((() :t ())
			(:t :t :t)
			(() () ()))
		       ((() :t ())
			(() :t :t)
			(() :t ())))
		      
		      (((() () ())     ;; z
			(:t :t ())
			(() :t :t))
		       ((() () :t)
			(() :t :t)
			(() :t ())))))
			
(defclass screen ()
  (defmethod init (self scr)
    (setmember [self . _scr] scr))
  (defmethod keypad (self onoff)
    ([_ncurses . keypad] [self . _scr] onoff))
  (defmethod move (self y x)
    ([_ncurses . wmove] [self . _scr] y x))
  (defmethod addch (self c)
    ([_ncurses . waddch] [self . _scr] c))
  (defmethod refresh (self)
    ([_ncurses . wrefresh] [self . _scr]))
  (defmethod getch (self)
    ([_ncurses . wgetch] [self . _scr]))
  (defmethod erase (self)
    ([_ncurses . werase] [self . _scr]))
  (defmethod print-with-attr (self str attr)
    (for-each c (string-to-list str)
      [self addch (+ (ord c) attr)]))
  (defmethod nodelay (self bf)
    ([_ncurses . nodelay] [self . _scr] bf))
  (defmethod halfdelay (self tenths)
    ([_ncurses . halfdelay] tenths)))

(defun ncurses-init ()
  ([_ncurses . initscr])
  ([_ncurses . cbreak])
  ([_ncurses . noecho])
  ([_ncurses . keypad] ([_ncurses . stdscr]) :t)
  ([_ncurses . stdscr]))

(defun enumerate (l)
  (defun enumerate-helper (s l)
    (if l
	(dcons (cons s (car l)) (enumerate-helper (+ 1 s) (cdr l)))
	()))
  (enumerate-helper 0 l))

(defun init-pos (kind)
  (cons 0 (idiv (- 10 (list-length (caar (nth kind *tetrominoes*)))) 2)))

(defun paint-board ()
  [*screen* erase]

  ;; paintin board
  (for-each c_line (enumerate *board*)
    (setq linenum (car c_line))
    (setq line (cdr c_line))
    [*screen* move linenum 0]
    [*screen* print-with-attr "  " [_ncurses . A_REVERSE]]
    (for-each c line
      [*screen* print-with-attr "  " (if c [_ncurses . A_REVERSE] 0)])
    [*screen* print-with-attr "  " [_ncurses . A_REVERSE]])
  [*screen* move 20 0]

  ;; paint bottom
  (for-each x (drange 0 12 1)
    [*screen* print-with-attr "  " [_ncurses . A_REVERSE]])

  (setq p (nth *rotation* (nth *piece* *collision-tetraminoes*)))
  (for-each coords p
    [*screen* move (+ (car coords) (car *piece-pos*)) (* 2 (+ 1 (cdr coords) (cdr *piece-pos*)))]
    [*screen* print-with-attr "[]" [_ncurses . A_REVERSE]])

  ;; paint next piece
  [*screen* move 0 *next-piece-display-x*]
  [*screen* print-with-attr "Next piece" 0]
  (for-each line (enumerate (car (nth *next-piece* *tetrominoes*)))
    [*screen* move (+ 3 (car line)) *next-piece-display-x*]
    (for-each c (cdr line)
      (if c
	  [*screen* print-with-attr "[]" [_ncurses . A_REVERSE]]
	  [*screen* print-with-attr "  " 0])))
  
  [*screen* move 22 0]
  [*screen* print-with-attr (format "completed lines: %n" *completed-lines*) 0]
  [*screen* move 23 0]
  [*screen* print-with-attr "Tetris in Limo!" 0]

  [*screen* refresh])

(defun check-collision (piece rotation pos)
  (setq p (nth rotation (nth piece *collision-tetraminoes*)))
  (block label-return
    (progn
     (for-each coords p
       (setq x (+ (cdr pos) (cdr coords)))
       (setq y (+ (car pos) (car coords)))
       (when (or (< x 0) (> x 9)
		 (> y 19))
	 (return-from label-return :t))
       (when (nth x (nth y *board*))
	 (return-from label-return :t)))
     nil)))

(defun create-collision-tetrominoes (tetromino)  ;; only one rotation!
  (apply append
	 (map (lambda (enum-line)
		(progn
		 (setq lineno (car enum-line))
		 (dmap (lambda (enum-tiles)
			 (cons lineno (car enum-tiles)))
		       (dfilter cdr (enumerate (cdr enum-line))))))
	      (enumerate tetromino))))

(setq *collision-tetraminoes*
      (map (lambda (tetromino)
	     (map create-collision-tetrominoes tetromino))
	   *tetrominoes*))

(defun go-left ()
  (when (not (check-collision *piece* *rotation* (cons (car *piece-pos*) (- (cdr *piece-pos*) 1))))
    (setcdr *piece-pos* (- (cdr *piece-pos*) 1))))

(defun go-right ()
  (when (not (check-collision *piece* *rotation* (cons (car *piece-pos*) (+ (cdr *piece-pos*) 1))))
    (setcdr *piece-pos* (+ (cdr *piece-pos*) 1))))

(defun go-down ()
  (when (not (check-collision *piece* *rotation* (cons (+ 1 (car *piece-pos*)) (cdr *piece-pos*))))
    (setcar *piece-pos* (+ (car *piece-pos*) 1))))

(defun rot-right ()
  (setq next-rot (mod (+ *rotation* 1)
		      (list-length (nth *piece* *tetrominoes*))))
  (when (not (check-collision *piece* next-rot *piece-pos*))
    (setf *rotation* next-rot)))

(defun rot-left ()
  (setq ll (list-length (nth *piece* *tetrominoes*)))
  (setq next-rot (mod (+ *rotation* (- ll 1)) ll))
  (when (not (check-collision *piece* next-rot *piece-pos*))
    (setf *rotation* next-rot)))

(defun check-and-remove-complete-lines ()
  (setq again :t)
  (while again
    (setf again nil)
    (for-each line (reverse (drange 0 20 1))
      (when (= 10 (list-length (filter (lambda (x) x)
				       (nth line *board*))))
	(setf *completed-lines* (+ 1 *completed-lines*))
	(setf again :t)
	(for-each destline (reverse (drange 1 (+ 1 line) 1))
	  (setnth destline *board* (nth (- destline 1) *board*)))
	(setcar *board* (map (lambda (x) nil) (drange 0 10 1)))))))
      
(defun fall-down ()
  (if (not (check-collision *piece* *rotation* (cons (+ 1 (car *piece-pos*)) (cdr *piece-pos*))))
      (setcar *piece-pos* (+ (car *piece-pos*) 1))
      (progn   ;; here the lock happens
         (setq p (nth *rotation* (nth *piece* *collision-tetraminoes*)))
	 (for-each coords p
	   (setq x (+ (cdr *piece-pos*) (cdr coords)))
	   (setq y (+ (car *piece-pos*) (car coords)))
	   (setnth x (nth y *board*) :t))
	 (check-and-remove-complete-lines)

	 (setf *delay* (- 10 (idiv (min *completed-lines* 100) 10)))
	 [*screen* halfdelay *delay*]
	 (setf *rotation* 0)
	 (setf *piece* *next-piece*)
	 (setf *piece-pos* (init-pos *piece*))
	 (setf *next-piece* (random (list-length *tetrominoes*)))
	 
	 (when (check-collision *piece* *rotation* *piece-pos*) ;; ok, that was it
	   (setf *quit* :t)))))

;; global variables
;; the board is 10 x 20
(setq *board*
      (map (lambda (x)
	     (map (lambda (x) ())
		  (drange 0 10 1)))
	   (drange 0 20 1)))

(setq *next-piece-display-x* 30)
(setq *next-piece* (random (list-length *tetrominoes*)))
(setq *piece* (random (list-length *tetrominoes*)))
(setq *piece-pos* (init-pos *piece*))  ;; (y . x)
(setq *delay* 10)  ;; seconds delay (TODO: this is going to be implemented later
(setq *rotation* 0)
(setq *completed-lines* 0)

(setq *screen* (new screen (ncurses-init)))

[*screen* halfdelay *delay*]

(paint-board)

(setq *quit* nil)
(while (not *quit*)
  (setq key [*screen* getch])
  (cond
    ((= key (ord "q")) (setf *quit* :t))
    ((= key [_ncurses . KEY_LEFT]) (go-left))
    ((= key [_ncurses . KEY_RIGHT]) (go-right))
    ((= key [_ncurses . KEY_UP]) (rot-left))
    ((= key (ord "z")) (rot-left))  ;; us keyboard layout
    ((= key (ord "y")) (rot-left))  ;; de keyboard layout
    ((= key (ord "x")) (rot-right))
    ((= key [_ncurses . KEY_DOWN]) (fall-down))
    (:else (fall-down)))
  (paint-board))

[*screen* getch]
([_ncurses . endwin])

(print (format "Thank you for playing Limo Tetris\nYou reached %n lines\n" *completed-lines*))
