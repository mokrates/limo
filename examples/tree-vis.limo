;;;; nodes: (head left right)
;;   eg:    (7 () (9 () ()))
;;   () == no node

(defmacro debug-write (x)
  `(write (cons ',x ,x)))

(defun max (x y)   ;; maximum of x and y
  (if (> x y) x y))

(setq left cadr)
(setq right caddr)
(setq head (comp repr (lambda (x) (car x))))
(setq childrenp cdr)
(setq node list)    ;; (node head left-child right-child)

(defun times (n str)
  (list-to-string (map (lambda (x) str) (drange 0 (int n) 1))))

(defun deepness (tree)
  "calculates the deepness of the tree"
  (cond ((not tree) 0)
	(:else (+ 1 (max (deepness (left tree))
			 (deepness (right tree)))))))

;; (defun concat-string-list (l1 l2)
;;   (cond ((not l1)
;; 	 ())
;; 	((not l2)
;; 	 (throw (list "concat-string-list: l1 longer than l2" l1)))
;; 	 ;;())
;; 	(:else
;; 	 (cons (string-concat (car l1) (car l2))
;; 	       (concat-string-list (cdr l1) (cdr l2))))))

;; (defun concat-string-list (l1 l2)
;;   (map string-concat l1 l2))

(setq concat-string-list (curry map string-concat))

(defun empty-tree (d)
  (map (lambda () (times (- (power 2 (+ 1 d)) 1) " "))
       (drange 0 (+ (* d 2) 1) 1)))

(defun vis-tree (tree)
  (defun vis-tree-helper (tree level)
    "creates a visualisation of the tree. may not be empty"
    (cond ((= level 0)
           "")
          ((not tree)
           (times (string-to-list (times (power 2 (+ 1 level)) " ")) (* 2 level)))
          (:else
           (let* ((l (left tree))
	          (r (right tree))
	          (lblock (if l
			      (vis-tree-helper l (- level 1))
			      (empty-tree (- level 1))))
	          (rblock (if r
			      (vis-tree-helper r (- level 1))
			      (empty-tree (- level 1)))))
             
	     ;; (debug-write d)
	     ;; (debug-write l)
	     ;; (debug-write r)
	     ;; (debug-write lblock)
	     ;; (debug-write rblock)
	     
	     (append
	      (list (list-to-string (list (times (- (power 2 level) 2) " ")
				          "("
				          (head tree)
				          ")"
				          (times (- (power 2 level) 2) " ")))
	            (string-concat (if l
				       (list-to-string (list (times (- (power 2 (- level 1)) 1) " ")
							     "╭"
							     (times (- (power 2 (- level 1)) 2) "─")
							     "╯ "))
				       (times (power 2 level) " "))
			           (if r
				       (list-to-string (list "╰"
							     (times (- (power 2 (- level 1)) 2) "─")
							     "╮"
							     (times (- (power 2 (- level 1)) 1) " ")))
				       (times (- (power 2 level) 1) " "))))
	      (reduce concat-string-list
		      (list lblock
		            (map (lambda () " ") (drange 0 (* level 2) 1))
		            rblock)))))))
  (vis-tree-helper tree (deepness tree)))

(defun print-vis-tree (t)
  (for-each l (vis-tree t)
    (write l)))




;; (PRINT-VIS-TREE '(0 (1 (3 () ()) (4 () ())) (2 (5 () ()) (6 () ()))))
;; (PRINT-VIS-TREE '(0 (1 (3 () ()) ()) (2 (5 () ()) (6 () ()))))
;; (PRINT-VIS-TREE '(9 (0 (1 (3 () ()) (4 () ())) (2 (5 () ()) (6 () ()))) (0 (1 (3 () ()) (4 () ())) (2 (5 () ()) (6 () ())))))
;; (PRINT-VIS-TREE '(9 (0 (1 (3 () ()) (4 () ())) (2 (5 () ()) (6 () ()))) (0 () (2 (5 () ()) (6 () ())))))



;;14              (9)                    (2^4-2)
;;         ╭──────╯ ╰──────╮
;;6       (8)             (a)            (2^3-2)
;;     ╭──╯ ╰──╮       ╭──╯ ╰──╮         
;;2   (3)     (7)     (b)     (f)        (2^2-2) 
;;   ╭╯ ╰╮   ╭╯ ╰╮   ╭╯ ╰╮   ╭╯ ╰╮  
;;0 (1) (2) (4) (5) (c) (d) (e) (g)      (2^1-2)
;;
;; basis = 4 * anzahl leaves = 2^deepness * 4 



"      (0)       "
"   ╭──╯ ╰──╮    "
"  (1)     (2)   "
" ╭╯ ╰╮   ╭╯ ╰╮  "
"(3) (4) (5) (6) "
"                "
"                "
