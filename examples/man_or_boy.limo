; -*- mode: scheme -*-

;; Knuth's Man or Boy test
;; https://en.wikipedia.org/wiki/Man_or_boy_test

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; man or boy in common lisp:
;; http://rosettacode.org/wiki/Man_or_boy_test#Common_Lisp
;; (defun man-or-boy (x)
;;  (a x (lambda () 1)
;;       (lambda () -1)
;;       (lambda () -1)
;;       (lambda () 1)
;;       (lambda () 0)))
 
;; (defun a (k x1 x2 x3 x4 x5)
;;   (labels ((b ()
;;              (decf k)
;;              (a k #'b x1 x2 x3 x4)))
;;     (if (<= k 0)
;;         (+ (funcall x4) (funcall x5))
;;         (b))))
 
;; (man-or-boy 10)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; man or boy in limo
;; for k=10 it should be -67

(defun man-or-boy (x)
  (a x
     (lambda () 1)
     (lambda () -1)
     (lambda () -1)
     (lambda () 1)
     (lambda () 0)))

(defun a (k x1 x2 x3 x4 x5)
  (defun b ()
    (setf k (- k 1))
    (a k b x1 x2 x3 x4))
  (if (<= k 0)
      (+ (x4) (x5))   ; if it were possible to write this endrecursively...
      (b)))

(write "this is Donald Knuth's 'Man or Boy' test")
(write "to test if a language has it's variable-references right.")
(write "with a k of 10 it should return -67")
(write "this worked on my machine for a k of 19. k=20 crashed.")
(write (man-or-boy 10))
