;;;;;;;; weather-report with wttr.in and with ssl!

(mod-load "fd")
(import "socket.limo")
(mod-load "ssl")

;; ===== should work =====
;; (setq host "wttr.in")
;; (setq host "www.google.com")
;; (setq host "www.facebook.com")

;; (setq host "badssl.com")

;; ====== should not work ====
;; (setq host "expired.badssl.com")
(setq host "wrong.host.badssl.com")
;; (setq host "self-signed.badssl.com")
;; (setq host "untrusted-root.badssl.com")
;; (setq host "revoked.badssl.com")   ;; works, not good.


;;;; ======= SOCKET ==========

(setq s ([_socket . make-socket] [_socket . AF_INET] [_socket . SOCK_STREAM] 0))    ;; create a socket

(print (format "socket: %r\n" s))

(setq ip ([_socket . gethostbyname] host))     ;; get ip for hostname

(print (format "ip %r\n" ip))
(print (format "ip in ip-format: %s\n" (ip-to-string ip)))

(setq sa ([_socket . make-sockaddr] ip 443))   ;; create socket address (from ip and port)

([_socket . connect] s sa)                     ;; connect socket to socketaddress

;;;;; ========== SSL ===============


;; ---- CTX -----
;; can you reuse this ctx for all your connections?
(setq ctx ([_ssl . ssl-ctx-new] ([_ssl . ssl-tls-client-method])))  ;; to initialize a client ssl-context.
([_ssl . ssl-ctx-set-default-verify-paths] ctx)                     ;; load CA-Certs
([_ssl . ssl-ctx-set-verify-simple] ctx 1)                          ;; turn verification on.

;; ----- SSL CONN -------
(setq sslconn ([_ssl . ssl-new] ctx))                ;;; create the ssl layer, connect to CTX
([_ssl . ssl-set1-host] sslconn host)                ;;; set the expected hostname, so SSL knows about it. (cannot check it if not set)

([_ssl . ssl-set-tlsext-host-name] sslconn host)     ;;; set SNI hostname, do this. required by many sites.

([_ssl . ssl-set-fd] sslconn s)                      ;;; connect the ssl layer to the network socket.

(try
 ([_ssl . ssl-connect] sslconn)                      ;;; create ssl connecttion
 (progn
  (print (string-concat "Connection failed: " ([_ssl . ssl-get-verify-result] sslconn) "\n"))
  (exit 1)))

(print "connected\n")


;;;; ============== USE SSL CONN ==============

([_ssl . ssl-write] sslconn (string-concat "GET https://" host "/ HTTP/1.0\r
User-Agent: limo-ssl Wget/1.20.3 (linux-gnu, github/mokrates/limo)\r\n\r\n"))  ;; calling myself wget to fool wttr.in

(setq c ([_ssl . ssl-read] sslconn 1))
(while (not (eq c ""))
  (print c)
  (setf c ([_ssl . ssl-read] sslconn 1)))
