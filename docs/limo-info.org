# -*- mode:org; eval:(auto-fill-mode t) -*-

#+TITLE: Limo Documentation
#+STARTUP: indent

* Introduction
** Limo is a toy
First things first: This is a hobby project I do, so everything here
is as I like it.  And it means some certain things:

- It's incomplete.  You miss something? Drop me a message, but perhaps
  I'm not down to implement your idea.  But perhaps I am.  Try it! I
  love to hear that someone plays with this thing.

- It's slow.  Yes, I tried to make it faster in a lot of ways, but real
  optimization is really complicated and requires a lot of work, which
  is not fun.

- It's insecure and unsafe.  It's a toy.  You can build any sort of
  things in limo, it's a real language, even web applications
  containing their own http server.  But be aware that it will crash,
  eat your data, have saved data not be readable again and if you put
  it online, hackers will break in in ways we didn't even know about.

- Many things could be done better or differently or in a more
  consistent or organized way.  But I am too lazy to do it or don't
  know any better

- The interface and language may break at any time.

But it's fuuuuuuuun.  And for simple projects it may be easy to augment
it to your needs or to be integrated into other projects.

** Limo is a LISP
Limo is a LISP.  My name is Moritz, so it is Limo.  I spell it "Î»imo"
because it is fun.

I didn't know how LISP worked and there were so many implementation
all of which I didn't really learn or understand, only in a very basic
way.  But somehow it's nerdiness and beauty got me.  So for a very long
time I wanted to build my own.  In 2012 I did.  Later I wrote my
bachelor thesis about it.

Being a LISP it has very simple but expandable syntax.

** Limo is interpreted
Limo is interpreted much like python.  You get a REPL, you get
tab-completion, you get a builtin ~(help)~ and ~(info)~ command.

Limo doesn't use a bytecode in any way, it directly interprets the
list-structures it reads in. (Sometimes it modifies them for
optimization purposes)

* Attributions
See attributions.txt in the git tree.

* How to build
Usually in Linux you just go into the ~limo/~ directory, and type
#+BEGIN_SRC bash
bash build.sh bin
#+END_SRC
This will build you a limo
- which will run on Linux and WSL, perhaps it also runs on Mac OS
- which will place limo into ~~/.local~, which on modern desktop linux
  distributions should be in the ~$PATH~, so you should be able to
  just start it with ~limo~.

** TODO dependencies
** TODO building limogtk
** TODO customizing your build

* TODO First Steps
** TODO Basic Syntax

* TODO Syntax
TBD

* TODO Standard Library
TBD

* TODO Lambdas, Macros, Builtins
TBD

* TODO Tail-Recursion
TBD

* TODO Dynamic Lists
TBD

* TODO Threading
TBD

* Optimization
** let vs. setq
How you should set variables to a values:

Tests seem to show that setting values via setq is potentially
slow. Mostly if there are many variables which lead to a growing of
the environment. So if you have very few variables (like 3 or less),
you may set them with setq, but if you have more, you should use
let. Even with 3 variables it's mostly faster.

let* translates to setq.


* Limo-Mode
There is a ~emacs/limo.el~ which contains a simple Limo-Mode for
emacs. I use it to write my own limo programs.

* TODO Extending
** How to build a extension library
Make a copy of one of the existing libraries.  Choose a small one like
`libs/fd` or somesuch.
You need the following files in your directory:
- yourlib.c : contains your code
- ldflags : a script which outputs the linking options for *statically* linking your
  lib to limo.  If you have to use `pkg-config` or somesuch, include
  it here.
  Example for `simplesdl`
  #+BEGIN_SRC shell
  #!/bin/bash
  echo "-Llibs/simplesdl -l:simplesdl.a `sdl-config --libs`"
#+END_SRC
- Makefile : The Makefile for building your lib.  It has to be able to
  build a shared library, a static library, and it has to be
  compatible with cygwin (build a .dll), etc.  Look at the examples.
** structure of yourlib.c
- =#include "limo.h"=
- Define macros to insert your BUILTINs BUILTINFUNs and VARiables into
  an environment
- Perhaps define static variables to hold symbols for =make_special= and =get_special=
- Define your BUILTINs and BUILTINFUNs
- Define the function =limo_init_yourlib(limo_data *env)=
  this will be called when your library is loaded via =MOD-LOAD=
** BUILTIN
*** What is BUILTIN for?
building a BUILTIN which doesn't work as a function (setq, setf,
lambda, etc)
For example: If you have to have access to the environment of the caller.
*** What is available in your BUILTIN?
- =arglist= : the called form.  the first element is =ZEROTH_ARG=

- =env= : the environment of the caller

- =FIRST_ARG=, =SECOND_ARG=, ...  : the arguments to your BUILTIN.  Not
  evaluated.  (=ZEROTH_ARG= is the symbol under which your BUILTIN was
  called).

- =REQUIRE_ARGC("NAME-OF-YOUR-BUILTIN",  <number-of-arguments-expected>)= : 
  throws an error, if builtin is called with wrong number of arguments

- =RETURN_THUNK(expr, env)= : return a thunk with =expr= to be evaluated
  in =env=

- =thunk_place= : If not NULL a place to be filled if you want to return
  a thunk.  You should probably use =RETURN_THUNK= instead of using this
  variable directly.

- See [[API]] for more
** BUILTINFUN
*** What is BUILTINFUN for?
To create a builtin function.
*** What is available in your BUILTINFUN?
- =argc= : number of arguments with which function was called

- =argv= : array of evaluated arguments

- =REQUIRE_ARGC_FUN("NAME-OF-YOUR-BUILTIN",  <number-of-arguments-expected>)= :
  throws an error, if builtinfun is called with wrong number of
  arguments
- See [[API]] for more
** API
*** CAR, CDR
=CAR(x)= , =CDR(x)= : car and cdr on limo objects.  Can be used as lvalue (can be
assigned to).  Usually used for [[=limo_TYPE_CONS=]], but some other object types
[[=limo_TYPE_THUNK=]], for example, use this, too.

*** =GETINTFROMMPQ=
=GETINTFROMMPQ(x)= : Get an =int= (really a =long long=) from an
[[=limo_TYPE_GMPQ=]] limo object.

*** =GETINTFROMNUMBER= 
=GETINTFROMNUMBER(x)= : get an =long long= from a number type limo object.

*** =GETDOUBLEFROMMPQ=
=GETDOUBLEFROMMPQ(x)= : Get a =double= from an [[=limo_TYPE_GMPQ=]] limo
object.

*** =COERCETODOUBLE=
=COERCETODOUBLE(number)= : get a value of c-type =double=, no matter
if =number= is of type =limo_TYPE_GMPQ= or =limo_TYPE_DOUBLE=

*** =LIMO_MPQ=  
=LIMO_MPQ(x)= : access the =mpq=-inside of limo object =x=.  Use
this with the libgmp library functions.

*** =REQUIRE_TYPE=
=REQUIRE_TYPE("NAME-OF-BUILTIN", x, limo_TYPE_XXX)= :
throws an error in the name of =NAME-OF-BUILTIN= if x is not of type
=limo_TYPE_XXX=.

*** =REQUIRE_NUMBER=
=REQUIRE_NUMBER("NAME-OF-BUILTIN", x)= :
throws an error in the name of =NAME-OF-BUILTIN= if x is not a
number type.  (number types are [[=limo_TYPE_GMPQ=]] and [[=limo_TYPE_DOUBLE=]])

** Types
*** =limo_TYPE_CONS=
contains a cons.

*** =limo_TYPE_GMPQ= 
Rational provided by libgmp.  Contains a
numerator and a denumerator which can be arbitrarily large.
On the limo-side, this is called =RATIONAL=, and the =RATIONALP=
predicate function tests for this type.

*** =limo_TYPE_DOUBLE= 
contains a double.

*** =limo_TYPE_THUNK=
contains a thunk.  same a [[=limo_TYPE_CONS=]].  car is the environment
under which the expression under cdr is to be evaluated.
