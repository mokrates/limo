(import "regex.limo")
(import "progbar.limo")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; shouldn't this be standard?
;; but perhaps importable... idk

(defun char-upcase (c)
  (setq o (ord c))
  (if (and (>= o (ord "a")) (<= o (ord "z")))
      (chr (+ o (- (ord "A") (ord "a"))))
      c))

(defun string-upcase (s)
  (list-to-string (map char-upcase (string-to-list s))))

(defun string-join (s l)
  (if l
      (list-to-string (cdr (apply append (map (lambda (x) (list s x)) l))))
      ""))

(defun uscore-to-minus (c)
  (if (= c "_")
      "-"
      c))

(defun uscore-to-minus-string (s)
  (list-to-string (map uscore-to-minus (string-to-list s))))

(defun string-endswith (s end)
  (= (string-slice s
                   (- (string-length s) (string-length end))
                   (string-length s))
     end))

(defun string-startswith (s start)
  (= (string-slice s 0 (string-length start)) start))

(defun list-to-dict (l)
  (setq d (make-dict))
  (for-each p l
    (dict-set d (car p) (cdr p)))
  d)

(defun re-match (p s n)
  (regex-match p s n (dict-getvalue regex-const 'reg_extended) 0))

(defun in (i l)
  (if l
      (if (= i (car l))
          :t
          (in i (cdr l)))
      ()))

(defun instr (c s)
  (in c (string-to-list s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass gtktype ()
  (defmethod init (self typename)
    (setmember [self . _typename] typename))
  (defmethod typename (self)
    [self . _typename])
  (defmethod l2c-assign (self vname fname)
    (format "%s = is_nil(ld_%s)?NULL:(%s)get_special(ld_%s, sym_limogtk_gpointer);\n" vname vname [self . _typename] vname))
  (defmethod c2l-to-result (self sfuncall)
    (format "gpointer gp_ReSuLt = %s;\nReSuLt = gp_ReSuLt?make_special(sym_limogtk_gpointer, gp_ReSuLt):nil;\n" sfuncall)))

(defclass gtkvoidtype gtktype   ;; only for c2l-to-result... makes no sense as argument!
  (defmethod c2l-to-result (self sfuncall)
    (format "%s;
ReSuLt = nil;" sfuncall)))

(defclass gtknewtype gtktype
  (defmethod c2l-to-result (self sfuncall)
    (format "ReSuLt = make_special(sym_limogtk_gpointer, %s);\n
GC_register_finalizer(ReSuLt, (GC_finalization_proc)limogtk_finalizer_g_object_unref, CDR(ReSuLt->d_special) -> d_special_intern, NULL, NULL);" sfuncall)))

(defclass gtkenumtype gtktype
  (defmethod l2c-assign (self vname limofname)
    (format "REQUIRE_TYPE(\"%s\", ld_%s, limo_TYPE_GMPQ);\n%s = (%s)GETINTFROMMPQ(ld_%s);\n"
            limofname vname vname [self . _typename] vname))
  (defmethod c2l-to-result (self sfuncall)
    (format "ReSuLt = make_number_from_long_long(%s);\n" sfuncall)))

(defclass gtkstringtype gtktype
  (defmethod l2c-assign (self vname limofname)
    (format "REQUIRE_TYPE(\"%s\", ld_%s, limo_TYPE_STRING);\n%s = ld_%s->d_string;\n"
            limofname vname vname vname))
  (defmethod c2l-to-result (self sfuncall)
    (format "ReSuLt = make_string(%s);\n" sfuncall)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun create-limo-data-vars (arguments)
  (string-concat "limo_data *ReSuLt"
                  (list-to-string (map (lambda (x) (format ", *ld_%s" (cadr x))) arguments))
                 ";"))

(defun create-c-vars (arguments)
  (list-to-string (map (lambda (x) (format "%s %s;\n" [(car x) typename] (cadr x))) arguments)))

(defun get-arguments (arguments)
  (list-to-string
   (map (lambda (x) (format "ld_%s = eval(%s, env);\n" (cadar x) (cadr x)))
        (zip arguments
             '("FIRST_ARG" "SECOND_ARG" "THIRD_ARG" "FOURTH_ARG" "FIFTH_ARG" "SIXTH_ARG" "SEVENTH_ARG" "EIGHTH_ARG" "NINTH_ARG")))))

(defun create-limo-fun (return-type fname . arguments)
  (setq argumentlist (string-join ", " (map cadr arguments)))
  (setq limofname (uscore-to-minus-string (string-upcase fname)))
  (list
   (format "INS_LIMOGTK_BUILTIN(builtin_%s,\"%s\");\n" fname limofname)
   (format "BUILTIN(builtin_%s)
{
  %s
  %s
  REQUIRE_ARGC(\"%s\", %n);
  %s
  %s
  %s
  return ReSuLt;
}

"
           fname
           (create-limo-data-vars arguments)
           (create-c-vars arguments)
           limofname (list-length arguments)
           (get-arguments arguments)
           (list-to-string (map (lambda (x) (format "%s" [(car x) l2c-assign (cadr x) limofname])) arguments))
           [return-type c2l-to-result (format "%s(%s)" fname argumentlist)])))


(defun output-file (list-of-functions)
  (setq results (dmap (lambda (x) (apply create-limo-fun x)) (progress-bar-w list-of-functions 80)))

  (setq fun-file  (file-open "_gtk-functions.h" "w"))
  (setq insert-file (file-open "_gtk-inserts.h" "w"))

  (for-each res (progress-bar-w results 80)
    (print fun-file (cadr res))
    (print fun-file "\n")

    (print insert-file (car res)))

  (file-close insert-file)
  (file-close fun-file))

;;;;;;;;;;;; types

;; (setq newGApplication* (new gtknewtype "GApplication *"))

;;;;;;;;;;;;;;;;


(setq enumtypes '("gboolean" "guint" "GApplicationFlags" "GtkPrintPages"
                  "GtkCornerType" "GtkReliefStyle" "GTestDBusFlags"
                  "GDateMonth" "GtkInputPurpose" "GUnicodeType" "GtkIconSize" "gint8"
                  "GFileType" "GdkInputMode" "GtkPrintStatus" "glong" "PangoAlignment"
                  "pid_t" "GdkCursorType" "cairo_font_type_t"
                  "GdkSubpixelLayout" "int" "GDateYear" "GTlsCertificateFlags"
                  "GtkStackTransitionType" "GDBusObjectManagerClientFlags"
                  "GSocketFamily" "gchar" "double" "PangoWrapMode" "GConverterResult"
                  "GFileAttributeType" "GtkRecentSortType"
                  "GUnicodeScript" "GtkFileChooserAction" "GtkJunctionSides"
                  "PangoFontMask" "GRegexCompileFlags" "GtkPrintDuplex" "PangoGravity"
                  "GSocketType" "float"
                  "GDataStreamNewlineType"
                  "GtkSensitivityType" "GdkDragProtocol" "GtkAssistantPageType"
                  "GtkTextWindowType" "guint8" "GtkMessageType"
                  "GtkSpinButtonUpdatePolicy" "GDateWeekday" "GdkEventType" "GIOFlags"
                  "GDataStreamByteOrder" "GdkDeviceToolType" "GtkPageSet"
                  "GdkWindowTypeHint" "PangoCoverageLevel" "GtkPopoverConstraint"
                  "GtkOrientation" "GtkSizeGroupMode"
                  "GtkScrollablePolicy" "GtkPackDirection" "GtkBaselinePosition"
                  "PangoVariant" "gunichar" "goffset" "GtkLevelBarMode"
                  "GFileAttributeStatus" "GtkPlacesOpenFlags" "uid_t" "GdkVisualType"
                  "GtkTextDirection" "GtkInputHints" "GDBusConnectionFlags"
                  "PangoDirection" "guchar" "GdkAxisFlags" "PangoGravityHint"
                  "GIOChannelError" "GEmblemOrigin" "GtkPageOrientation" "gdouble"
                  "GIOErrorEnum" "GLogWriterOutput" "GNetworkConnectivity" "GTokenValue"
                  "GIOCondition" "GtkRevealerTransitionType" "GtkButtonBoxStyle"
                  "GtkFileFilterFlags" "gfloat" "GdkInputSource"
                  "GPasswordSave" "time_t" "GdkColorspace" "GdkDragAction"
                  "GtkStateFlags" "GtkTreeViewGridLines" "GtkSizeRequestMode"
                  "GdkModifierType" "GtkRecentFilterFlags"
                  "GDBusServerFlags" "GtkAlign" "GIOStatus" "GFileError"
                  "GDBusMessageByteOrder"
                  "GtkPrintQuality" "gssize" "GTimeSpan" "GSocketProtocol"
                  "GtkPrintOperationResult" "GDBusProxyFlags" "gsize" "GType"
                  "GDriveStartStopType" "PangoWeight" "GDBusMessageFlags" "gulong"
                  "GtkTreeViewColumnSizing" "GUnicodeBreakType" "gint64"
                  "GtkJustification" "GLogLevelFlags" "GTlsPasswordFlags" "GDateDay"
                  "GtkPositionType" "GDBusMessageType"
                  "GPollableReturn" "GDBusCapabilityFlags" "AtkTextAttribute"
                  "GtkNumberUpLayout" "GtkToolbarStyle" "gint16" "GTlsInteractionResult"
                  "guint32" "PangoStyle" "AtkLayer" "GdkGrabStatus" "GVariantClass"
                  "GQuark" "PangoAttrType" "GRegexMatchFlags" "GtkArrowType"
                  "GdkWindowType" "GtkWrapMode" "GtkPropagationPhase"
                  "GdkEventMask" "AtkRole" "AtkRelationType" "GdkDeviceType"
                  "GdkGravity" "guint64" "GBindingFlags" "GdkAxisUse" "gint"
                  "GdkWindowState" "PangoStretch" "GtkSelectionMode"
                  "PangoEllipsizeMode" "AtkStateType" "GtkWindowType" "GtkLicense"
                  "gint32" "guint16" "GTokenType" "GtkSortType"
                  "GtkTreeModelFlags" "GtkShadowType" "GtkImageType" "GtkCssSectionType"
                  "GDBusInterfaceSkeletonFlags" "GdkWindowHints"

                  "cairo_line_cap_t" "cairo_format_t" "cairo_content_t" "cairo_surface_observer_mode_t"
                  "cairo_status_t" "cairo_font_slant_t" "cairo_font_weight_t" "cairo_extend_t" "cairo_filter_t"
                  "cairo_text_cluster_flags_t" "cairo_fill_rule_t"))

(setq gtktypes '("GError **" "GtkRevealer *" "gunichar *" "GtkLayout *"
                 "GtkMenuBar *" "GtkToolbar *" "GOutputMessage *" "GtkBin *"
                 "GMemoryInputStream *" "GtkNotebook *" "GtkInvisible *" "AtkHypertext *"
                 "GtkFixed *" "GtkGesturePan *" "GLoadableIcon *" "GtkProgressBar *"
                 "GtkAppChooserDialog *" "GtkPaned *" "GApplicationCommandLine *"
                 "GtkAppChooser *" "GtkScaleButton *" "const GEnumValue *"
                 "AtkComponent *" "GtkMenuToolButton *" "GtkHeaderBar *" "GtkMenuButton *"
                 "GtkActionable *" "GtkListBox *" "const GString *"
                 "GtkNativeDialog *" "GtkFileChooser *" "const GtkTargetEntry *"
                 "GRWLock *" "GtkStatusbar *" "GtkStatusIcon *" "GtkFrame *" "GDBusMethodInvocation *"
                 "const GdkPixbufFormat *" "GClosure *" "GtkScale *" "const volatile gint *"
                 "AtkEditableText *" "AtkRegistry *" "void *"
                 "GSimpleAsyncResult *" "GtkAllocation *" "GDBusObjectManagerClient *"
                 "GtkIMContextSimple *" "GtkSeparatorToolItem *" "GDtlsClientConnection *"
                 "volatile void *" "GtkMountOperation *" "GtkGestureSwipe *"
                 "GInetSocketAddress *" "GtkColorChooser *" "GtkIconView *" "GtkButton *"
                 "GFilterOutputStream *" "GdkEventKey *" "GSeekable *" "GListModel *"
                 "GtkMenuShell *" "const GtkRecentFilterInfo *" "GtkBox *"
                 "GtkSearchBar *" "AtkRange *" "GTree *" "GModule *" "GdkModifierType *"
                 "GEnumClass *" "GtkCellAreaClass *" "GTimer *" "const GRegex *"
                 "GtkStackSwitcher *" "GtkFlowBox *" "const volatile void *" "const void *"
                 "GSourceFuncs *" "GTestLogBuffer *" "gfloat *"
                 "GtkRecentChooser *" "AtkAction *" "AtkHyperlinkImpl *"
                 "GFilterInputStream *" "GtkExpander *" "GConverterInputStream *"
                 "GStaticResource *" "GtkCalendar *" "GObjectClass *" "GBytesIcon *"
                 "GtkShortcutLabel *" "GtkRecentChooserMenu *" "GtkMenuItem *" "const GtkSelectionData *"
                 "GtkEventBox *" "GCond *" "PangoRenderer *" "const GScannerConfig *"
                 "volatile guint *" "const guint32 *" "GRand *"
                 "GdkGeometry *" "GConverterOutputStream *" "GtkDialog *" "const GdkGeometry *" "AtkRelation *" "const GVariantType * const *"
                 "GAsyncResult*" "GParamSpec *" "GtkCheckMenuItem *" "GTlsConnection *"
                 "guint *" "const gchar *const *" "GtkAppChooserButton *"
                 "GtkEntryBuffer *" "GdkDeviceManager *" "const PangoAttribute *"
                 "const cairo_region_t*" "GtkImage *" "GdkDevicePad *" "GtkRadioButton *"
                 "GtkEditable *" "GtkOrientable *" "GtkPlacesSidebar *"
                 "GtkToolShell *" "const GDebugKey *" "AtkImplementor *" "const GtkCssSection *"
                 "GtkGestureDrag *" "GPollableInputStream *" "const GtkRequisition *"
                 "AtkDocument *" "GSignalInvocationHint *"
                 "PangoStyle *" "GtkButtonBox *" "GtkToolPalette *" "GtkToolButton *"
                 "PangoCairoFontMap *" "GHookList *" "const GDBusInterfaceVTable *"
                 "GtkFontButton *" "GtkViewport *" "gsize *" "AtkRelationSet *"
                 "GtkRadioMenuItem *" "const PangoAttrClass *" "GDate *" "const GdkPixbuf *"
                 "GtkSearchEntry *" "const GtkTextIter *" "const GtkFileFilterInfo *"
                 "GtkCellAreaBox *" "GFlagsClass *" "GtkTextView *"
                 "GFileMonitor *" "GPatternSpec *" "const GdkEvent *"
                 "GNetworkService *" "GtkCellRendererText *" "GTypePlugin *" "const GError *"
                 "GtkScrollable *" "GtkTreeModelSort *" "const GMatchInfo *"
                 "GBufferedOutputStream *" "const gunichar *" "GFileAttributeType *"
                 "GOutputVector *" "GAsyncResult *" "AtkTableCell *" "GtkFontChooser *"
                 "GDtlsConnection *" "GVariant * const *" "const GParamSpecTypeInfo *"
                 "GtkAccessible *" "PangoLogAttr *" "double *" "GTypeClass *"
                 "GtkApplicationWindow *" "GScanner *" "GtkSwitch *"
                 "GtkGestureMultiPress *" "GPollableOutputStream *" "const cairo_region_t *"
                 "GtkToggleButton *" "const GHmac *" "const GdkRGBA *"
                 "const gunichar2 *" "GtkAccelGroup *" "GtkSpinButton *" "AtkImage *"
                 "gulong *" "GInputMessage *" "GBufferedInputStream *" "AtkTable *"
                 "GMutex *" "GtkAccelLabel *" "GTypeModule *" "const GdkRectangle *"
                 "GTcpConnection *" "GPollFD *" "GtkScrolledWindow *" "GtkContainer *"
                 "GRemoteActionGroup *" "GtkAppChooserWidget *" "GWeakRef *" "GtkRange *"
                 "GtkColorButton *" "GSettingsBackend *" "GtkPopoverMenu *"
                 "GtkEventControllerKey *" "GtkCellRendererToggle *" "guint32 *"
                 "GdkWMDecoration *" "GtkGestureZoom *" "GTestSuite *"
                 "GtkRadioToolButton *" "const PangoColor *" "GtkLockButton *"
                 "GtkGestureStylus *" "AtkAttributeSet *" "GThemedIcon *" "GtkComboBox *"
                 "const GtkTreePath *" "GtkTreeModelFilter *" "GAsyncInitable *"
                 "GNetworkAddress *" "GtkOffscreenWindow *" "GtkLinkButton *"
                 "grefcount *" "GtkCellLayout *" "GtkTreeSortable *"
                 "AtkStreamableContent *" "GtkInfoBar *" "PangoWeight *"
                 "GDBusInterfaceSkeleton *" "GtkIMMulticontext *" "GMemoryOutputStream *"
                 "hb_feature_t *" "GtkFileChooserButton *"
                 "GtkStyleProvider *" "GRecMutex *" "AtkStateSet *" "gatomicrefcount *"
                 "GProxyAddress *" "GtkTreeDragDest *" "GValue *" "const GtkAllocation *"
                 "GtkSettings *" "GtkListBoxRow *" "gunichar2 *" "volatile gint *"
                 "PangoVariant *" "AtkValue *" "const GOutputVector *" "const GOptionEntry *"
                 "GtkAssistant *" "GtkCellView *" "GtkWidgetClass *"
                 "const GParamSpec *" "GNode *" "GtkStackSidebar *" "PangoCairoFont *"
                 "GtkToolItemGroup *" "GtkGLArea *" "GtkTooltip *"
                 "GtkEventControllerScroll *" "GtkGestureSingle *" "const GFlagsValue *"
                 "GTestLogMsg *" "GtkLevelBar *" "GTcpWrapperConnection *"
                 "GTypeInstance *" "GtkGestureRotate *" "GdkRectangle *" "GtkLabel *"
                 "GtkAspectFrame *" "GTlsClientConnection *" "const GDBusSubtreeVTable *"
                 "GtkActionBar *" "const GMarkupParser *" "GStringChunk *"
                 "GtkSpinner *" "GtkTreeView *" "GtkAboutDialog *" "GtkOverlay *"
                 "PangoRectangle *" "const PangoRectangle *" "GtkMessageDialog *"
                 "const GChecksum *" "GParamSpecPool *" "GSimpleProxyResolver *"
                 "AtkText *" "GdkKeymap *" "PangoStretch *" "GtkComboBoxText *" "int *"
                 "const GtkPadActionEntry *" "GtkPrintContext *" "GtkTreeDragSource *"
                 "GtkBuildable *" "GtkPrintOperationPreview *" "const GdkEventMotion *"
                 "AtkSelection *" "GEmblemedIcon *" "const GtkBorder *"
                 "AtkGObjectAccessible *" "GtkContainerClass *" "GHashTableIter *"
                 "const GtkRecentData *" "GtkToggleToolButton *" "GPrivate *" "volatile gsize *"
                 "const GDate *" "GInitable *" "GActionMap *" "GtkAccelKey *"
                 "GdkWindowAttr *" "GOnce *" "GFileIcon *"
                 "gpointer" "gconstpointer" "GApplication *" "GtkGrid *"
                 "GDBusConnection *"
                 "GActionGroup *"
                 "GNotification *" "AtkObjectFactory *"
                 "GAppInfoMonitor *" "GdkSeat *" "GMatchInfo *" "GMainLoop *"
                 "GMemoryMonitor *" "GtkTextChildAnchor*" "GVolume *" "GPatternSpec*"
                 "GdkMonitor *" "AtkHyperlink*" "GString*" "GtkCssSection *"
                 "GAppLaunchContext *" "GIOChannel *" "GtkAdjustment*" "GdkCursor*"
                 "GtkBindingSet *" "GZlibDecompressor *" "GtkTargetList *"
                 "GFileOutputStream *" "GtkFlowBoxChild *" "GtkPrintSettings *"
                 "GtkToolItem *" "PangoLayoutRun *" "GdkFrameClock*" "GListStore *"
                 "GDatagramBased *" "GdkAtom *" "GBytes *" "GUnixFDList *" "AtkRange*"
                 "GQueue *" "GFile *" "const cairo_font_options_t *" "GtkBuilder *"
                 "guint8 *" "guint*" "GTimer*" "const PangoScript *"
                 "GtkToolItemGroup*" "GDBusInterfaceInfo *" "const GSList *"
                 "GConverter *" "GtkStyleContext *" "cairo_surface_t *" "GTestDBus *"
                 "GSocket *" "GMountOperation *" "GSocketControlMessage *" "GdkDevice*"
                 "GDBusObjectProxy *" "GTypeInstance*" "const GList *"
                 "GtkAccelGroupEntry*" "GtkWindowGroup *" "gboolean *" "GMappedFile *"
                 "GTypeClass*" "GdkPixbuf *" "GFileAttributeMatcher *"
                 "GDBusAnnotationInfo *" "GAction *" "GDBusInterface *"
                 "GtkTextTagTable *" "GDate*" "GdkRGBA *" "GdkDisplay*" "GProxy *"
                 "GNetworkMonitor *" "GdkVisual *" "GFileMonitor*" "GCredentials *"
                 "GHook *" "GSettingsSchemaKey *" "GMenuLinkIter *" "GObject*"
                 "PangoScriptIter *" "const gchar * const *" "GOutputStream *"
                 "GSocketAddress *" "const GValue *" "GtkTextAttributes*"
                 "GdkDragContext *" "GdkDisplay *" "GVolumeMonitor *"
                 "GSocketAddressEnumerator *" "GtkTreeViewColumn *" "GMainContext *"
                 "GSimpleAction *" "GScanner*"
                 "GSignalInvocationHint*" "const GVariantType *" "GtkEventController *"
                 "AtkHyperlink *" "const PangoLogAttr *" "GtkRequisition *"
                 "GdkPixbufLoader *" "GHook*" "GTlsCertificate *" "GTestCase*"
                 "GdkEventSequence *" "gpointer *" "GInputStream *" "GVariantIter *"
                 "GtkPageRange *" "GtkCellAreaContext *" "GtkMenu *" "PangoFontset *"
                 "GOutputStream*" "GChecksum *" "AtkRelationSet*" "GArray*"
                 "GHashTable*" "gint *" "GVfs *" "GdkPixbufAnimationIter *"
                 "GDBusObjectManager *" "GResource *" "GSimpleActionGroup *"
                 "GdkWindow*" "GdkAppLaunchContext *" "AtkObject *" "GDBusPropertyInfo *"
                 "GtkIconTheme *" "const GType*" "GtkListStore *"
                 "GdkPixbufSimpleAnim *" "GtkAccelMap *" "GSettingsSchemaSource *"
                 "GtkWidget *" "GtkWidgetPath *" "GFileEnumerator *" "GRegex *"
                 "GParamSpec*" "AtkObject*" "GError*" "GtkCellRenderer*" "GtkPageSetup *"
                 "GDrive *" "GBinding *" "GdkPixbufFormat *" "GClosure*"
                 "GEnumValue*" "GVariant*" "GTestLogBuffer*" "GPermission *" "GDir *"
                 "PangoTabArray *" "GtkRecentManager *" "GOptionContext *"
                 "GdkFrameTimings *" "GBytes*" "PangoLanguage*" "GFileInfo *"
                 "GtkAccelGroup*" "GtkIconInfo *" "GdkDrawingContext *" "GdkCursor *"
                 "GList *" "GDataOutputStream *" "GMount *" "GdkGLContext *"
                 "GtkTextIter *" "GTlsDatabase*" "GMenuModel *" "GtkTextAttributes *"
                 "GSocketListener *" "GtkBuilder*" "const PangoMatrix *" "GCancellable *"
                 "GValue*" "GdkEvent*" "GOptionGroup *" "GdkEvent *"
                 "GPropertyAction *" "GSettings *" "GtkApplication *" "GtkTreeStore *"
                 "GtkTextMark*" "const GDBusPropertyInfo *" "GtkTreeModel *"
                 "const GDBusMethodInfo *" "GdkDeviceTool *" "GdkScreen*" "GInetAddressMask *"
                 "GtkWindow *" "GtkTreeSelection *" "GDataInputStream *"
                 "GParamSpecPool*" "AtkAttributeSet*" "GVariantBuilder *" "const guint8*"
                 "PangoFontFamily *" "GList*" "GdkDevice *" "GByteArray *"
                 "GTlsPassword *" "GtkTreeView*" "cairo_t *" "PangoAttrIterator *"
                 "GSubprocessLauncher *" "GSocketClient *" "PangoAttribute *"
                 "GIOChannel*" "GCharsetConverter *" "GSequence *" "GError *"
                 "AtkRegistry*" "GDBusObjectSkeleton *" "GSList*" "GStringChunk*"
                 "cairo_scaled_font_t *" "GSrvTarget *" "GtkTextTag *" "PangoContext *"
                 "PangoFont *" "AtkStateSet*" "GtkRecentInfo *" "GtkPrintOperation *"
                 "GString *" "GVariantDict *" "GtkSelectionData *" "GtkRecentFilter *"
                 "GtkListBoxRow*" "GMenuItem *" "GDBusActionGroup *" "GDBusArgInfo *"
                 "GTestLogMsg*" "GTlsCertificate*" "PangoFontMetrics *" "PangoLanguage *"
                 "GtkTextBuffer *" "gpointer*" "GDateTime *" "GtkSizeGroup *"
                 "GInetAddress *" "PangoLayout *" "GDBusProxy *" "GObject *" "GPtrArray *"
                 "GInputStream*" "hb_font_t *" "GtkTargetList*" "GZlibCompressor *"
                 "GType*" "GArray *" "GIOExtension *" "PangoCoverage *" "GDBusMessage *"
                 "GDBusMenuModel *" "GDBusObjectManagerServer *" "GtkToolItem*"
                 "GTestSuite*" "GtkPaperSize *" "PangoLayoutIter *" "GtkFileFilter *"
                 "GDBusServer *" "GVariantType *" "GSocketService *" "GTlsBackend *"
                 "const gchar* const *" "GSequenceIter *" "GAsyncQueue *" "GIcon*"
                 "PangoGlyphItem *" "GtkGesture *" "const GtkWidgetPath *" "GNode*"
                 "GIOModule *" "GtkPopover *" "GtkIMContext *" "GtkFileChooserNative *"
                 "GtkStack *" "GDBusSignalInfo *" "GByteArray*" "GFilenameCompleter *"
                 "GMarkupParseContext *" "GtkClipboard *" "GHmac *" "GtkCellEditable *"
                 "GDBusInterfaceVTable *" "gdouble *" "GtkTextMark *" "GHashTable *"
                 "guint8*" "GSocketConnectable *" "GtkCellArea *" "GdkScreen *"
                 "GtkEntry *" "GdkVisual*" "GdkPixbufAnimation*" "const void*"
                 "GtkAccelKey*" "PangoMatrix *" "GdkDisplayManager *" "GModule*"
                 "PangoTabArray*" "GTypeValueTable*" "GResolver *" "GMenuAttributeIter *"
                 "GMenu *" "GdkPixbufAnimation *" "GtkTextBuffer*" "GAppInfo *"
                 "GKeyFile *" "PangoGlyphString *" "GtkPadController *" "GtkTargetEntry *"
                 "GdkPixbuf*" "GFileIOStream *" "GVariant *" "PangoFontMap *"
                 "GdkWindow *" "GtkTextChildAnchor *" "GIOStream *" "GSList *"
                 "GTypePlugin*" "GTlsDatabase *" "GtkEntryBuffer*" "PangoFontFace *"
                 "GSocketConnection *" "PangoColor *" "PangoAttrList *" "GQueue*"
                 "PangoLayoutLine *" "GtkSettings*" "GdkFrameClock *" "PangoLayout*"
                 "GRand*" "GTimeZone *" "GtkWidget*" "const PangoFontDescription *"
                 "GtkTreeIter *" "PangoFontDescription *" "GSubprocess *"
                 "AtkRelation*" "GDBusAuthObserver *" "GFileInputStream *" "GEmblem *"
                 "GtkTextTagTable*" "GThreadPool *" "const GFileAttributeInfo *"
                 "GSettingsSchema *" "GtkBorder *" "GBookmarkFile *" "GDBusMethodInfo *" "GPtrArray*" "GIcon *" "GtkAdjustment *" "GTree*" "GTask *"
                 "GtkEntryCompletion *" "GdkKeymap*" "GFlagsValue*""GtkTreePath *"
                 "GtkCssProvider *" "GIOModuleScope *" "PangoGlyphItemIter *"
                 "GFileAttributeInfoList *" "const guint8 *" "GTlsInteraction *"
                 "GIOExtensionPoint *" "cairo_region_t *" "GSource *" "GProxyResolver *"
                 "AtkObjectFactory*" "const GtkTargetEntry*" "PangoItem *" "GThread *"
                 "GtkTreeRowReference *" "GtkCellRenderer *" "GDBusNodeInfo *" "GDBusObject *"

                 "cairo_rectangle_int_t *" "cairo_glyph_t *" "const cairo_scaled_font_t *"
                 "cairo_font_face_t *" "cairo_rectangle_list_t *" "const cairo_user_data_key_t *"
                 "const cairo_glyph_t *" "const cairo_matrix_t *" "cairo_font_extents_t *"
                 "cairo_text_cluster_t *" "cairo_matrix_t *" "const cairo_path_t *" "cairo_text_extents_t *"
                 "cairo_pattern_t *" "cairo_device_t *" "const cairo_text_cluster_t *" "const cairo_rectangle_t *"
                 "const cairo_text_cluster_t *" "cairo_path_t *" "cairo_font_options_t *" ))

(setq stringtypes '("const gchar *" "const guchar *" "gchar*" "const char *" "const gchar*" "const char*" "gchar *" "char *" "guchar *" "unsigned char *"))

(setq typedict (make-dict))
(for-each t enumtypes (dict-set typedict t (new gtkenumtype t)))
(for-each t gtktypes  (dict-set typedict t (new gtktype t)))
(for-each t stringtypes (dict-set typedict t (new gtkstringtype t)))
(dict-set typedict "void" (new gtkvoidtype "void"))

(setq exceptions (make-dict))
(setq exceptionlist '("g_atomic_pointer_compare_and_exchange" "g_atomic_pointer_add" "g_atomic_pointer_and"
                      "g_atomic_pointer_or" "g_atomic_pointer_xor" "g_once_init_leave" "g_atomic_pointer_set"
                      "g_atomic_pointer_get" "g_once_init_enter" "g_scanner_cur_value" "g_pointer_bit_lock"
                      "g_pointer_bit_trylock" "g_pointer_bit_unlock" "g_key_file_set_double_list"))
(for-each e exceptionlist (dict-set exceptions e ()))

(setq missing-types (make-dict))
(setq processed-fns ())

(defun process-paramlist (pl)
  (block _break
    (map (lambda (s)
           (progn
            (setq matches (re-match "([^()]+[* ])([A-Za-z0-9_]+)(,|\\);)?" s 4))
            (when (not matches)
              (if (= (nth (- (list-length pl) 1) pl) "...);")
                  ;;(print (format "variadic func %r\n" pl))
                  ()
                  (progbar-print (format "not matching params: %r" pl)))
              (break))
;;            (print (format "parameter-matches: %r\n" matches))
            (setq ptype (string-strip (nth 1 matches)))
            (setq pname (nth 2 matches))
            (when (not (dict-has-key typedict ptype))
              (dict-set missing-types ptype ())
              (break))
            (list (dict-getvalue typedict ptype) pname)))
         pl)))


(defun process-fn-def (f-stuff)
  (block _break
    (progn

     (when (not (instr "(" (car f-stuff)))
       (setf f-stuff (cons (string-concat (car f-stuff) " " (cadr f-stuff)) (cddr f-stuff))))
     
     ;; if first line contains several parameters divided by commas ...:
     (setf f-stuff
           (apply append
                  (map (lambda (y)
                         (filter (lambda (x) (!= x ""))
                                 (string-split y ",")))
                       f-stuff)))
     ;;;; !!several parameters divided by commas

     (setq matches (re-match "([^()]+[* ])([A-Za-z0-9_]+) ?\\((.*)($|,|\\);)" (car f-stuff) 4))

     (if matches
         (progn
          (setq rettype (string-strip (cadr matches)))
          (when (not (dict-has-key typedict rettype))
            (progbar-print (format "missing type %s" rettype))
            (dict-set missing-types rettype ())
            (break))
          (setq fname (caddr matches))
          (when (dict-has-key exceptions fname)
            (break))
          (setq first-arg (nth 3 matches))
          (when (or (= first-arg "void") (= first-arg "void) __attribute__((__const__)"))
            (setf processed-fns
                  (cons (list (dict-getvalue typedict rettype) fname) processed-fns))
            (break))

          (setq plist (process-paramlist (cons first-arg (cdr f-stuff))))
          (when (not plist) (break))
          (setf processed-fns
                (cons (append (list (dict-getvalue typedict rettype) fname)
                              plist)
                      processed-fns)))
         (progbar-print (format "coudn't parse: %r" f-stuff))))))

(setq line ())
(setq last-line ())
(for-each next-line (progress-bar-wt (file-readlines stdin) 80 49000)
  (setf last-line line)
  (setf line (string-strip next-line))
  (cond ((string-endswith line "extern")  ;; ignore the deprecated stuff
         (setq function-def ())
         (while :t :breakable
           (setf line (string-strip (file-readline stdin)))
           (setf function-def (append function-def (list line)))
           (when (string-endswith line ";")
             (break)))
         (process-fn-def function-def))

        ((and (string-startswith line "cairo_") (member "(" (string-to-list line)))
         (setq function-def (list (format "%s %s" (string-strip last-line) line)))
         (while :t :breakable
           (when (string-endswith line ";")
             (break))
           (setf line (string-strip (file-readline stdin)))
           (setf function-def (append function-def (list line))))
         (process-fn-def function-def))))

(print (format "missing types: %r\n" (map (lambda (x) (car x)) (dict-to-list missing-types))))
(output-file processed-fns)

(print "\n")
