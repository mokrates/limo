(setq _exceptions (make-dict))

(defmacro defexception (exc superexc)
  (if superexc
      `(dict-set _exceptions ',exc (cons ',exc (dict-getvalue _exceptions ',superexc)))
      `(dict-set _exceptions ',exc (cons ',exc ()))))


;; (catch (TYPE BODY)
;;        ((TYPE VAR) BODY))

(defmacro catch args
  (with-gensym (exc)
      `(progn
        (setq ,exc (if (consp _exception) (car _exception) _exception))
        (cond
         ,@(map
            (lambda (clause)
              (if (and (consp (car clause)) (car clause))
                  (if (caar clause)
                      `((or (= ',(caar clause) ,exc)
                            (member ',(caar clause)
                                    (and (dict-has-key _exceptions ,exc)
                                         (dict-getvalue _exceptions ,exc))))
                        (setq ,(cadar clause) _exception)
                        ,@(cdr clause))
                      `(:t (setq ,(cadar clause) _exception)
                           ,@(cdr clause)))
                  (if (car clause)
                      `((or (= ',(car clause) ,exc)
                            (member ',(car clause)
                                    (and (dict-has-key _exceptions ,exc)
                                         (dict-getvalue _exceptions ,exc))))
                        ,@(cdr clause))
                      `(:t ,@(cdr clause)))))
            args)
         (:else _rethrow)))))

(defhelp throw "BUILTIN (throw <exception>) 

<exception> should be a list the first element of which denotes the
exception's type, the rest is freeform and will usually be a message
and perhaps some parameters.

EX: 
(throw (list 'file-not-found-error 
             (format \"file %s cound not be found\" fname)))

The exception-types can be ordered in a hierarchy using DEFEXCEPTION
")

(defhelp try "BUILTIN (try <try-clause> <catch-clause>) 

The try-clause is tried. If an exception is THROWn (see (help throw))
while try-clause is executed, the catch-clause is executed
immediately. 

Usually, you should use the CATCH-macro (see (help catch)) in the catch-clause.

EX:
(try
 (throw '(example-error \"this is an example\"))
 (catch ((example-error exc)
         (write exc))))
OUTPUT: (example-error \"this is an example\")
-> (example-error \"this is an example\")

INTERNA:
In the catch-clause, there are three variables defined:
_EXCEPTION: the exception which was caught
_RETHROW: a variable whose value, when returned, triggers the rethrow of
the original exception.
_STACKTRACE: the call at the moment of the raising of the exception.
CAUTION: This cannot be returned! The data this points to loses its
validity after leaving the try-catch-clause. Returning it or making it
available to other code WILL result in a segfault. If you want to make
it available, you have to copy it first. UNDYN will do this.
")

(defhelp catch "MACRO (catch <catch-clause> <catch-clause>...)
see (help throw) for throwing exceptions
see (help try)   for catching exceptions
CATCH is to be used with TRY. The CATCH-macro should only be used
inside a TRY-statement.

Catch-clauses can be:
(TYPE BODY) - TYPE can be a exception-type denoting symbol or () for all
              exceptions
((TYPE VAR) BODY) - here, also, TYPE can be a exception-type denoting
                    symbol or () for all exceptions. Also, the exception
                    is assigned to variable VAR.

Catch-clauses catch exceptions if the type-denoting symbol is equal,
or if you're trying to catch a supertype, defined with DEFEXCEPTION.
This should work intuitively.

If no clause catches the exception, the exception is rethrown.
")

(defhelp defexception "MACRO (defexception <exception> <superexception>
Can be used to define new exceptions
EX: (defexception myerror ())
or to define subtypes to supertypes of exceptions
EX: (defexception mysuberror myerror)

To define a subtype, the supertype has to be defined.
If a subtype is defined, the supertype can be used in a catch-clause
to also catch subtypes. See (help catch)
")

(defhelp _exceptions "DICTIONARY _exceptions
Internal variable used by DEFEXCEPTION and CATCH to define
exception-hierarchies. Don't touch.
")

(defhelp finally "BUILTIN (finally <try-block> <finally-block>)
Try-block is executed. If - while executing try-block - an
exception is thrown, finally-block is executed and the exception
is rethrown.

EX:
(finally (throw '(foo \"bar\")) 
         (write \"finally!\"))
OUTPUT: \"finally!\"
Exception caught: (FOO \"bar\")
")
