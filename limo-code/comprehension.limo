(import "pmatch.limo")

(defmacro compr x
  (pmatch x
	  ((,x for ,y in ,z) `(map ,`(lambda ,`(,y) ,x) ,z))
	  ((,x for ,y in ,z if ,c) `(filter ,`(lambda ,`(,y) ,c) ,`(map ,`(lambda ,`(,y) ,x) ,z)))))

(defmacro dcompr x
  (pmatch x
	  ((,x for ,y in ,z) `(dmap ,`(lambda ,`(,y) ,x) ,z))
	  ((,x for ,y in ,z if ,c) `(dfilter ,`(lambda ,`(,y) ,c) ,`(dmap ,`(lambda ,`(,y) ,x) ,z)))))

(defhelp compr
  "MACRO compr
Syntax: (compr <expr> for <var> in <list> [if <expr>])
Works like list-comprehension in python.
Example:
(compr (* 2 x) for x in '(1 2 3)) -> (2 4 6)
(compr x for x in '(1 2 3 4) if (= 0 (mod x 2))) -> (2 4) 
")

(defhelp dcompr
  "MACRO dcompr
Dynamic version of COMPR.
See (help compr)
")
