;; limo.init
;; do it in limo!

;;(setq _trace :t)

;; lisp style defmacro and defun (but with schemy param lists)

;; (setq list (lambda x x))
;; (freezeq list)
(setq defmacro 
      (macro (name args . body)
	(list setq name (list 'macro args (cons 'progn body)))))
(freezeq defmacro)

(setq defun
      (macro (name args . body)
	(list 'setq name (list 'lambda args (cons 'progn body)))))
(freezeq defun)

(setq nil ())
(freezeq nil)


(defun not (x)
  (if x () :t))
(freezeq not)

(defun caar (l) (car (car l)))         (freezeq caar)
(defun cdar (l) (cdr (car l)))         (freezeq cdar)
(defun cadr (l) (car (cdr l)))         (freezeq cadr)
(defun cddr (l) (cdr (cdr l)))         (freezeq cddr)
(defun cadar (l) (car (cdr (car l))))  (freezeq cadar)
(defun caddr (l) (car (cdr (cdr l))))  (freezeq caddr)
(defun cdddr (l) (cdr (cdr (cdr l))))  (freezeq cdddr)

;;;;;;;;;;;; if optimization
(setq _if if)
(freezeq _if)
(defmacro if (cond then else)
  (_if (consp cond)
       (_if (eq (car cond) 'not)
            (list 'if (cadr cond) else then)
            (_if (eq (car cond) 'or)
                 (_if (cdr cond)
                      (list 'if
                            (cadr cond)
                            then
                            (_if (cddr cond)
                                 (list 'if
                                       (cons 'or (cddr cond))
                                       then
                                       else)
                                 else))
                      else)
                 (_if (eq (car cond) 'and)
                      (_if (cdr cond)
                           (list 'if
                                 (cadr cond)
                                 (_if (cddr cond)
                                      (list 'if
                                            (cons 'and (cddr cond))
                                            then
                                            else)
                                      then)
                                 else)
                           then)
                      (list _if cond then else))))
       (list _if cond then else)))
(freezeq if)
 ;;;;;;;;;


;; scheme style 'define'
(defmacro define x
  (if (consp (car x)) ;; a function
      (list 'setq (car (car x)) (list 'lambda (cdr (car x)) (cons 'progn (cdr x))))
      (list 'setq (car x) (car (cdr x)))))
(freezeq define)

(defmacro assert (x)
  `(if ,x :t 
       (throw (list 'ASSERT_FAIL (quote ,x)))))
(freezeq assert)

(defmacro asserteq (x y)
  (try
   `(assert (deepeq ,x ,y))
   `(write (list 'asserteq_failed ,x ,y))))
(freezeq asserteq)

(setq _import_path (string-concat ".:" _limo-prefix))

(defmacro import (name)
  (defmacro _import (name pathlist)
    (if pathlist
	`(if (try
		(load (string-concat ,(car pathlist) (string-concat "/" ,name)))
		:failed)
	     (,_import ,name ,(cdr pathlist))
	     ())
	`(throw (format "could not import %s" ,name))))
  `(,_import ,name ,(string-split _import_path ":")))

(defmacro mod-load (name)
  `(if (mod-isinline ,name)
       (mod-loadinline ,name)
       (loaddll (string-concat (string-concat _limo-prefix ,name) ".so")
		  (string-concat "limo_init_" ,name))))

(defun reverse (l) ;; used by quasiquote
  (defun helper (l akku)
    (if l 
        (helper (cdr l) (cons (car l) akku)) 
        akku))
  (helper l ()))
(freezeq reverse)


;; '(defun undyn (x)
;;   (defun helper (x akku)
;;     (cond ((not x) akku)
;; 	  ((consp x)
;; 	   (helper (cdr x) (cons (undyn (car x)) akku)))
;; 	  (:else (throw (cons "undyn takes a proper list" x)))))
;;   (if (not (consp x))
;;       x
;;       (reverse (helper x ()))))

(defun undyn (l)               ; this undyn doesn't reverse twice.
  (defun helper (l last)
    (cond ((not l) (setcdr last ()))
          ((not (consp l)) (setcdr last l))
          (:else
           (setcdr last (cons (car l) ()))
           (helper (cdr l) (cdr last)))))
  (if (not l)
      ()
      (progn (setq start (cons (car l) ()))
	     (helper (cdr l) start)
	     start)))
(freezeq undyn)


(defun deepeq (x y)
  (cond ((consp x)
	 (and (consp y)
	      (deepeq (car x) (car y))
	      (deepeq (cdr x) (cdr y))))
	(:t (eq x y))))

(freezeq deepeq)

;; ########################
;; shallow quasiquotes
;; ########################
;; '(defmacro quasiquote (l) ; (not using callerenv)
;;   (defun helper (l akku)
;;     (cond ((not l) akku)
;; 	  ((and (consp (car l)) 
;; 		(car l)  ;; not nil
;; 		(eq (caar l) 'comma))
;; 	   (helper (cdr l) 
;; 		   (cons (list 'list (cadar l)) akku)))
;; 	  ((and (consp (car l))
;; 		(car l)
;; 		(eq (caar l) 'splice))
;; 	   (helper (cdr l) (cons (cadar l) akku)))
;; 	  (:t (helper (cdr l) 
;; 		      (cons (list 'list (list 'quote (car l))) akku)))))
;;   (cons 'append (reverse (helper l ()))))

;; (defmacro quasiquote (l)    ; dynamic version  (doesn't work yet. problems with thunk-eval in funcall-eval)
;;   (defun helper (l)
;;     (cond ((not l)         ; end of list
;; 	   ())
;; 	  ((and (consp (car l))  ; comma
;; 		(car l)
;; 		(eq (caar l) 'comma))
;; 	   (dcons (list 'list (cadar l)) (helper (cdr l))))  
;; 	  ((and (consp (car l))  ; splice
;; 		(car l)
;; 		(eq (caar l) 'splice))
;; 	   (dcons (cadar l) (helper (cdr l))))
;; 	  (:t (dcons (list 'list (list 'quote (car l)))  ; just a symbol to be quoted
;; 		     (helper (cdr l))))))
;;   (undyn (cons append (helper l))))

;; a try at a deep quasiquote. because those ,`s are not good!
(defmacro quasiquote (l)  
  (defun helper (l)
    (cond ((not l)         ; end of list
	   ())
          
          ((not (consp l)) ;; dotpair
           (list (cons 'quote (cons l ()))))
          
	  ((and (consp (car l))  ; comma
		(car l)
		(eq (caar l) 'comma))
	   (dcons (list 'list (cadar l)) (helper (cdr l))))
          
	  ((and (consp (car l))  ; splice
		(car l)
		(eq (caar l) 'splice))
	   (dcons (cadar l) (helper (cdr l))))
          
	  ((consp (car l))
           (dcons (list list (cons append (undyn (helper (car l)))))
                  (helper (cdr l))))
          (:t
           (dcons (list list (list quote (car l)))  ; just a symbol to be quoted
                  (helper (cdr l))))))
  (undyn (dcons append (helper l))))
(freezeq quasiquote)


; limo-loop/recur
; ex: (limo-loop (a b ...) (start-a start-b ...) body: (if endp returnval (recur next-a next-b)))
(defmacro limo-loop x
  `(progn
    (defun recur ,(car x)
	,@(cddr x))
    (recur ,@(cadr x))))
(freezeq limo-loop)

; loop/recur
; ex: (loop (a start-a b start-b ...) body: (if endp returnval (recur next-a next-b ...)))
(defmacro loop x
  (defun lvals (args)
    (if args (cons (car args) (lvals (cddr args))) ()))
  (defun rvals (args)
    (if args (cons (cadr args) (rvals (cddr args))) ()))

  `(progn
    (defun recur ,(lvals (car x))
	,@(cdr x))
    (recur ,@(rvals (car x)))))
(freezeq loop)

(defun dmap1 (f a)
  (when a
    (dcons (f (car a)) (dmap1 f (cdr a)))))
(freezeq dmap1)

(defun map1 (f a)
  (undyn (dmap1 f a)))
(freezeq map1)

(defun dmapn (f . a)
  (when (consp (car a))
    (dcons (apply f (map1 car a))
           (apply dmap (cons f (map1 cdr a))))))
(freezeq dmapn)

(defun mapn (f . a)
  (undyn (apply dmap (cons f a))))
(freezeq mapn)

(defun dmap (f . a)
  (apply (if (consp (cdr a)) dmapn dmap1) (cons f a)))
(freezeq dmap)

(defun map (f . a)
  (undyn (apply dmap (cons f a))))
(freezeq map)

(defun map-list (f a)
  (defun helper (f a)
    (when a
	  (cons (f a) (helper f (cdr a)))))
  (freezeq helper)
  (helper f a))
(freezeq map-list)

(defun dmap-list (f a)
  (defun helper (f a)
    (when a
	  (dcons (f a) (helper f (cdr a)))))
  (freezeq helper)
  (helper f a))
(freezeq dmap-list)

(defun curry (f . args)
  (lambda x
    (apply f (append args x))))
(freezeq curry)

(defun list-length (x)
  (loop (x x l 0)
	(if x (recur (cdr x) (+ 1 l)) l)))
(freezeq list-length)

(defun identity (x) x)
(freezeq identity)

(defun comp fs
  (cond ((not fs) identity)
	((not (consp fs)) (throw (cons "(comp {fun}*)" fs)))
	((not (cdr fs)) (car fs))
	(:t (lambda x ((car fs) (apply (apply comp
                                         (cdr fs))
                                  x))))))
(freezeq comp)

(defun dzip x
  (when (apply andf (map1 consp x))
    (dcons (map1 car x)
           (apply dzip (map1 cdr x)))))
(freezeq dzip)

(defun zip x
  (undyn (apply dzip x)))
(freezeq zip)

(defun dzip2 (a b)
  (when (and (consp a)
             (consp b))
    (dcons (cons (car a) 
                 (car b))
           (dzip2 (cdr a) 
                  (cdr b)))))
(freezeq dzip2)

(defun zip2 (a b)
  (undyn (dzip2 a b)))
(freezeq zip2)

(defmacro when (c . b)
  `(if ,c ,(cons 'progn b) ()))
(freezeq when)

(defmacro unless (c . b)
  `(if ,c () ,(cons 'progn b)))
(freezeq unless)
  
(defmacro or l
  (if l 
      (list 'if (car l) 
	    (car l) 
	    (cons 'or (cdr l)))
      ()))
(freezeq or)

(defmacro and l
  (if l
      (list 'if (car l) 
	    (cons 'and (cdr l))
	    ())
      :t))
(freezeq and)

(defun andf l  ;; and as a function. not shorting
  (cond ((not l) :t)
	((not (consp l))
	 (error "ERROR: (andf foo bar)"))
	((car l)
	 (apply andf (cdr l)))
	(:t ())))
(freezeq andf)

;; (defmacro cond l   ;; used by quasiquote
;;   (if l
;;       (if (or (= (caar l) :t) (= (caar l) :else))
;; 	  (cons 'progn (apply list (cdar l)))
;; 	  (list 'if (caar l)
;; 		(cons 'progn (apply list (cdar l)))
;; 		(cons 'cond (cdr l))))
;;       ()))

(defmacro cond l   ;; used by quasiquote
  (if l
      (if (or (= (caar l) :t) (= (caar l) :else))
	  (cons 'progn (cdar l))
	  (list 'if (caar l)
		(cons 'progn (cdar l))
		(cons 'cond (cdr l))))
      ()))

(freezeq cond)

(defmacro switch (s . items)
  (when items
	`(if (eq ,s ,(caar items)) 
	     (progn ,@(cdar items))
	     (switch ,s ,@(cdr items)))))
(freezeq switch)

;; (defun * os
;;   (if os
;;       (reduce mpq_mul os)
;;       1))
(setq * mpq_mul)
(freezeq *)

;; (defun + os
;;   (if os
;;       (if (numberp (car os))
;; 	  (reduce mpq_add os)
;; 	  (apply string-concat os))
;;       0))
(setq + mpq_add)
(freezeq +)

(setq - mpq_sub)
(freezeq -)

(setq / mpq_div)
(freezeq /)

(setq < ltn)   (freezeq <)
(setq > gtn)   (freezeq >)
(setq = eq)    (freezeq =)
(defun <= (x y)  
  (or (< x y) (= x y)))
(freezeq <=)

(defun >= (x y)
  (or (> x y) (= x y)))
(freezeq >=)

(defun != (x y) (not (eq x y)))
(freezeq !=)

(defun floor (n)
    (idiv (mpq_numerator n) (mpq_denominator n)))

(defun fak (n)
  (defun helper (n akku)
    (if (eq n 1) 
	akku
	(helper (mpq_sub n 1) (mpq_mul akku n))))
  (helper n 1))
(freezeq fak)

(defun nth (n l)
  (cond ((eq n 0) (car l))
	(:else (nth (mpq_sub n 1) (cdr l)))))
(freezeq nth)

(defun drange (start end step)
  (if (>= start end)
      ()
      (dcons start (drange (mpq_add start step) end step))))
(freezeq drange)

(defun range (start end step)  ;; recursive! with generator: drange.
  (undyn (drange start end step)))
(freezeq range)

(defmacro mrange (first . rest)
  (if rest
      `(range ,first ,(car rest) ,(if (cdr rest) (cadr rest) 1))
      `(range 0 ,first 1)))

(defmacro mdrange (first . rest)
  (if rest
      `(drange ,first ,(car rest) ,(if (cdr rest) (cadr rest) 1))
      `(drange 0 ,first 1)))

(defun lreduce (f l)   ;; fold l with f from left
  (defun recur (akku l)
    (if l
	(recur (f akku (car l)) (cdr l))
	akku))
  (recur (car l) (cdr l)))
(freezeq lreduce)

(setq reduce lreduce)
(freezeq reduce)

(defun dfilter (p l)    ;; filter list with predicate p
  (cond ((not l) l)
	((p (car l)) (dcons (car l) (dfilter p (cdr l))))
	(:else (dfilter p (cdr l)))))
(freezeq dfilter)

(defun filter (p l)    ;; recursive
  (undyn (dfilter p l)))
(freezeq filter)

(defmacro scope x
  `((lambda () (progn ,@x))))
(freezeq scope)

(setq dappend
      ((lambda ()
         (progn
          (defun helper (l1 l2)
            (if (not l1) l2
                (dcons (car l1) (helper (cdr l1) l2))))
          
          (defun dappend l
            (reduce helper (dcons () l)))))))
(freezeq dappend)

(defun append x
  (undyn (apply dappend x)))
(freezeq append)

(defun nconc lists
  (cond ((not lists) ())
        ((not (car lists)) (apply nconc (cdr lists)))
        (:else
         (do ((cursor (car lists) (cdr cursor)))
             ((not (cdr cursor))
              (progn (setcdr cursor (apply nconc (cdr lists)))
                     (car lists)))))))

(setq warn-once
      (scope
       (setq already-warned (make-dict))
       (lambda (msg)
	 (when (not (dict-has-key already-warned msg))
	   (dict-set already-warned msg :t)
	   (print (string-concat msg "\n"))))))

(setq for-each
      (scope
       (defmacro simple-while (condition . body)
	 (with-gensym (fun)
	     `(progn
	       (defun ,fun ()
		 (if ,condition      
		     (progn
		      ,@body
		      (,fun))
		     ()))
	       (,fun))))
       (freezeq simple-while)
       
       (defmacro for-each (x l . body)
	 (setq continue-frame (lambda (x) `(progn ,@x)))
	 (setq break-frame (lambda (x) `(progn ,@x)))
	 (simple-while (member (car body) '(:break :breakable :continue :continuable))
		       (cond ((member (car body) '(:break :breakable))
			      (setf break-frame (lambda (x) `(block _break (progn ,@x)))))
			     ((member (car body) '(:continue :continuable))
			      (setf continue-frame (lambda (x) `(block _continue (progn ,@x))))))
		       (setf body (cdr body)))
	 
	 (setq it (gensym))
	 (setq recur (gensym))
	 (break-frame
	  `(progn
	    (defun ,recur (,it)
	      (when ,it 
		(setq ,x (car ,it)) 
		,(continue-frame body)
		(,recur (cdr ,it))))
	    (,recur ,l))))))
(freezeq for-each)

(defmacro for-list (x l . body)
  (setq recur (gensym))
  `(progn
    (defun ,recur (,x)
	(when ,x 
		,@body
		(,recur (cdr ,x))))
    (,recur ,l)))
(freezeq for-list)

(defmacro do (vars test . body)     ;; cl-do  / no breaks/continues yet.
  (with-gensym (f)
      `(progn
        (defun ,f ,(map1 car vars)
          (if ,(car test)
              ,(cadr test)
              (progn
               ,@body
               (,f ,@(map1 caddr vars)))))
        (,f ,@(map1 cadr vars)))))

(defun sort (lt l)   ; merge
  (defun seconds (l) ; every second item
    (when l
      (dcons (car l)
             (when (cdr l) (seconds (cddr l))))))
  
  (defun merge (l m)
    (cond ((and l m)
           (if (lt (car l) (car m))
               (dcons (car l) (merge (cdr l) m))
               (dcons (car m) (merge l (cdr m)))))
          (:else (or l m))))
  (undyn
   (when l
     (let ((left (undyn (seconds l)))
           (right (undyn (seconds (cdr l)))))
       (if (not (and left right))
           (or left right)
           (merge (sort lt left) (sort lt right)))))))
           
(defun qsort (lt l) 
  (defun ltx (x) (lt x (car l)))
  (when l (append 
	   (qsort lt (dfilter ltx (cdr l)))
	   (list (car l))
	   (qsort lt (dfilter (comp not ltx) (cdr l))))))
(freezeq qsort)

(defun make-symbol (s)
  (make-sym-uninterned (string-concat "#:" s)))
(freezeq make-symbol)

(setq _ngensym 0)
(defun gensym x
  (setf _ngensym (+ 1 _ngensym))
  (if x 
      (make-symbol (string-concat (car x) (reprn _ngensym)))
      (make-symbol (string-concat "G" (reprn _ngensym)))))
(freezeq gensym)

;; with-gensym
;; (with-gensym (syma symb symc) body)
(defmacro with-gensym (syms . body)
  `(progn ,@(map (lambda (x) `(setq ,x (gensym))) syms)
	  ,@body))
(freezeq with-gensym)

; unify
; ex: (unify (a b c) '(1 2 3)) ; (a<-1, b<-2, c<-3)
(defmacro unify (l v)       ; destructuring assignment.
  (setq index (gensym))
  `(progn
    (setq ,index ,v)
    ,@(loop (l l akku ())
	    (if l 
		(recur (cdr l) 
		       (append akku
			       `((setq ,(car l) (car ,index))
				 (setq ,index (cdr ,index)))))
		akku))
    (unsetq ,index)))
(freezeq unify)

(defmacro unifyf (l v)       ; destructuring assignment.
  (setq index (gensym))
  `(progn
    (setq ,index ,v)
    ,@(loop (l l akku ())
	    (if l 
		(recur (cdr l) 
		       (append akku
			       `((setf ,(car l) (car ,index))
				 (setf ,index (cdr ,index)))))
		akku))
    (unsetq ,index)))
(freezeq unifyf)

(defun assoc (name l)
  (when l
	(if (eq name (caar l)) 
	    (car l)
	    (assoc name (cdr l)))))
(freezeq assoc)

(defun member (m l)
  (cond ((not l) ())
	((eq (car l) m) l)
	(:else (member m (cdr l)))))
(freezeq member)

;;(defmacro set (k v)         ; TODO: this doesn't work yet.
;;  `(setq (eval ,k) ,v))
;;(freezeq set)

(defun setnth (n l v)
  (if (eq n 0)
      (setcar l v)
      (setnth (- n 1) (cdr l) v)))
(freezeq setnth)

(defmacro incf (v . i)
  (if i
      `(setf ,v (+ ,v ,(car i)))
      `(setf ,v (+ ,v 1))))

(defmacro decf (v . i)
  (if i
      `(setf ,v (- ,v ,(car i)))
      `(setf ,v (- ,v 1))))

(setq _place-setters (make-dict))
(freezeq _place-setters)

(setq _setf setf)
(freezeq _setf)
(defmacro setplace (k v)
  (cond ((consp k)
	 `(,(cdr (dict-get _place-setters (car k))) ,@(append (cdr k) (list v))))
	(:else `(,_setf ,k ,v))))
(setf setf setplace)
(unsetq setplace)
(freezeq setf)


(defun register-place-setter (g s)
  (dict-set _place-setters g s))
(freezeq register-place-setter)

(register-place-setter 'car 'setcar)
(register-place-setter 'cdr 'setcdr)
(register-place-setter 'dict-getvalue 'dict-set)
(register-place-setter 'nth 'setnth)

(defun dict-getvalue (d k)
  (cdr (dict-get d k)))
(freezeq dict-getvalue)

(setq true :t)
(setq false ())
(freezeq false)

(defun format (s . args)
  (defun format-list (s args)
    (cond ((not s) ())
	  ((eq "%" (car s))
	   (switch (cadr s)
		   ("%" (dcons "%"
			       (format-list (cddr s) (cdr args))))
		   ("s" (dcons (car args) 
			       (format-list (cddr s) (cdr args))))
		   ("n" (dcons (reprn (car args))
			       (format-list (cddr s) (cdr args))))
		   ("r" (dcons (repr (car args))
			       (format-list (cddr s) (cdr args))))))
	  (:else (dcons (car s) (format-list (cdr s) args)))))
  (reduce string-concat (format-list (string-to-list s) args)))
(freezeq format)

(defun repr (x)
  (warn-once "TODO: (REPR string) must be reworked")
  (defun list-to-string (x)
    (cond ((not x) ")")
	  ((not (cdr x)) 
	   (string-concat (repr (car x)) ")"))
	  ((not (consp (cdr x))) 
	   (string-concat (repr (car x)) " . " (repr (cdr x)) ")"))
	  (:else (string-concat (repr (car x)) " " 
				(list-to-string (cdr x))))))

  (cond ((not x) "()")
        ((numberp x) (reprn x))
	((stringp x) (string-concat "\"" x "\""))
	((symbolp x) (symbol-to-string x))
	((consp x) (string-concat "(" (list-to-string x)))))
(freezeq repr)

(defun dict (alist)
  (setq nd (make-dict))
  (for-each p alist
    (dict-set nd (car p) (cdr p)))
  nd)
(freezeq dict)

(defun dict-copy (d)
  (setq nd (make-dict))
  (for-each p (dict-to-list d)
    (dict-set nd (car p) (cdr p)))
  nd)
(freezeq dict-copy)

(freezeq block)

(defmacro let* (lblock . body)
  (defun letvars (lblock)
    (when lblock
      (cons `(setq ,(caar lblock) ,(cadar lblock)) (letvars (cdr lblock)))))
  `(progn ,@(letvars lblock) ,@body))
(freezeq let*)

(defmacro let (lblock . body)
  `((lambda ,(map1 car lblock) (progn ,@body))
    ,@(map1 cadr lblock)))
(freezeq let)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  dynamic variables
(defmacro dyn-getq (var)
    `(env-getq (get-dynamic-env) ,var))
(defmacro dyn-setq (var val)
    `(env-setq (get-dynamic-env) ,var ,val))
(defmacro dyn-setf (var val)
    `(env-setf (get-dynamic-env) ,var ,val))
(defmacro with-dynamic-env body
    `(_with-dynamic-env (progn ,@body)))
(defmacro dyn-let (vars . body)
  `(with-dynamic-env
    ,(cons 'progn
	   (map (lambda (x)
		  `(dyn-setq ,(car x)
			     ,(cadr x)))
		vars))
    ,@body))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; objects and classes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; a class is an env.
;; (setq new-class (make-class parent-class))
;; (defmethod the-class init (args ...) body)
;; defining init is required.

(defmacro class (parentclass . methods)
  (with-gensym (classname)
      `(progn
	(defclass ,classname ,parentclass ,@methods)
	,classname)))
(freezeq class)

(defmacro defclass (classname parentclass . methods)
  `(progn
    (setq ,classname (make-env ,parentclass))
    ,@(map (lambda (method)
	     (progn
	      (cond ((and (consp method)
			  (eq (car method) 'defmethod))
		     `(env-setq ,classname ,(cadr method)
				(lambda ,(caddr method) (progn ,@(cdddr method)))))
		    ((and (consp method)
			  (eq (car method) 'defprop))
		     `(env-setq ,classname ,(cadr method)
				(lambda (self . x)
				    (if x
					  (setmember ,(cons 'bracket (cons 'self (caddr method))) (car x))
					  ,(cons 'bracket (cons 'self (caddr method)))))))
		    (:else (throw "method-definition must be (defmethod methodname (args) body)")))))
	   methods)))
(freezeq defclass)

;;; (setmember [object . member] value)
(defmacro setmember (br val)
  `(env-setq ,(cadr br) ,(cddr br) ,val))
(freezeq setmember)

;; getting a member from an object:
;; [object . member]
;; call a method:
;; [object method args...]
;; limo-core translates [x y z] to (bracket x y z) but leaves 'bracket' undefined.
;; so this is the definition:
(defmacro bracket (o . args)
  (if (consp args) ; method-call
      `((env-getq ,o ,(car args)) ,o ,@(cdr args))
      `(env-getq ,o ,args)))
(freezeq bracket)

;; create new object (env) by deriving a new env from the class-env
;; methods will be curried, and called with 'self' as first parameter (python-style)
;; slow. obviously. there CANNOT be any non-method-members in the class because
;; EVERY item is curried which makes no sense for non-lambdas.
;; non-method-members HAVE to be created in the init-method.
(defun new (c . args)
  (setq ret (make-env c))
  (apply [ret . init] (cons ret args))  ; call the constructor
  ret)
(freezeq new)

;; is-instance
(defun instancep (c o)
  (when (envp o)
    (setq up (car (env-extract o)))
    (if up
	(if (eq up c)
	    :t
	    (instancep up c))
	())))
(freezeq instancep)

(defmacro _prop-set args
  (cons 'bracket args))
(register-place-setter 'bracket '_prop-set)
	 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; end of classes/objects
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (utime)
  (setq t (time))
  (+ (* 1000000 (car t)) (cadr t)))
(freezeq utime)

(defmacro timerun code
  (setq t1 (gensym))
  (setq t2 (gensym))
  `(progn (setq ,t1 (utime))
	  ,@code
	  (setq ,t2 (utime))
	  (- ,t2 ,t1)))
(freezeq timerun)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; settings

(gcsetmax (* 1024 512))  ;; max 128mb ram for limo.
					;(* 1 2 3)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; reader-macros

;; reader-macros HAVE to return either nil or a cons
;; if 

(setq *readtable* (make-dict))
(dict-set *readtable* "|"
          (scope
           (defun comment-reader (rs)
             (unless (reader-stream-eof rs)
               (if (= (reader-stream-getc rs) "|")
                   (unless (= (setq c (reader-stream-getc rs)) "#")
                     (progn (reader-stream-ungetc rs c)
                            (comment-reader rs)))
                   (comment-reader rs))))))

(dict-set *readtable* "." (lambda (rs) (list (eval (read rs)))))
(dict-set *readtable* "!"
          (scope
           (defun line-comment-reader (rs)
             (unless (or (reader-stream-eof rs)
                         (= (reader-stream-getc rs) "\n"))
               (line-comment-reader rs)))))

(dict-set *readtable* "~"
          (lambda (rs)
            (let ((name ""))
              (while (and (not (reader-stream-eof rs))
                          (!= "~" (setq c (reader-stream-getc rs))))
                (setf name (string-concat name c)))
              ((dict-getvalue *readtable* name) rs))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; not so cool stuff

(defun writelist (x)
  (when x
    (write (car x))
    (writelist (cdr x))))

(defun sleep (s)
  (usleep (* s 1000000)))
(freezeq sleep)
