(defun to-binary (x)
  (defun helper (x)
    (cond ((= x 0) ())
	  ((= (mod x 2) 0) (dcons "0" (helper (floor (/ x 2)))))
	  (:else (dcons "1" (helper (floor (/ x 2)))))))
  (let ((res (reverse (helper x))))
    (if res
	(list-to-string res)
	"0")))

(defun from-binary (x)
  (setq res 0)
  (for-each i (mdrange (string-length x))
    (setf res (+ (- (ord (string-nth i x)) (ord "0")) (* 2 res))))
  res)
