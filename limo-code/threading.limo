;;;;;;;;; threading ;;;;;;;;;
;; classes interface ;;;;

(import "enumerate.limo")
(mod-load "threading")

(defclass thread ()
  (defmethod %init (self fun)
    (setmember [self . _fun] fun))
  (defmethod run (self)
    (setmember [self . _thread] ([_threading . thread-create] [self . _fun]))
    self)
  (defmethod join (self)
    ([_threading . thread-join] [self . _thread])))

(defhelp thread
  "CLASS thread
Methods:
  %init (self fun)  --   <fun> is the thread-worker-function
  run  (self)      --   run the thread.
  join (self)      --   join the thread.
")
(defhelp [thread . %init]
  "METHOD [thread . %init]
(new thread <fun>)
Constructor to create a thread-object. 
The thread is defined to run function <fun>
")

(defclass mutex ()
  (defmethod %init (self . type)
    (if type
        (setmember [self . _mutex] ([_threading . mutex-create] (car type)))
        (setmember [self . _mutex] ([_threading . mutex-create]))))
  (defmethod lock (self)
    ([_threading . mutex-lock] [self . _mutex]))
  (defmethod unlock (self)
    ([_threading . mutex-unlock] [self . _mutex]))
  (defmethod trylock (self)
    ([_threading . mutex-trylock] [self . _mutex])))
(defhelp mutex
  "CLASS mutex
Methods:
  %init (self . type)   -- initialized thread object
  lock (self)
  unlock (self)
  trylock (self)

(new mutex)
or
(new mutex <type>)
where type may be :FAST or :RECURSIVE or :ERRORCHECK
")

(defclass condition-lock ()
  (defmethod %init (self)
    (setmember [self . _cond] ([_threading . cond-create])))
  (defmethod wait (self mutex)
    ([_threading . cond-wait] [self . _cond] [mutex . _mutex]))
  (defmethod signal (self)
    ([_threading . cond-signal] [self . _cond]))
  (defmethod broadcast (self)
    ([_threading . cond-broadcast] [self . _cond])))

;;;;;;; cool stuff ;;;;;;;
(defmacro synchronized (mut . body)
  `(finally (progn [,mut lock] ,@body) [,mut unlock]))

;;;; queue-lock
;; a FIFO for thread-communication
;; attention: you can get race-conditions if you use HAS-NEXT and GET
;; use your own end-marker, or if that doesn't work GET-OR-END with a marker

(defun make-queue-lock-family ()
  (cons (new mutex :recursive) (new condition-lock)))

(defclass queue-lock ()
  (defmethod %init (self . lfamily)
    (cond (lfamily
	   (setmember [self . _family] (car lfamily))
	   (setmember [self . _mutex] (caar lfamily))
	   (setmember [self . _cond] (cdar lfamily)))
	  (:else
	   (setmember [self . _mutex] (new mutex :recursive))
	   (setmember [self . _cond] (new condition-lock))))
    (setmember [self . _getnext] (cons () ()))
    (setmember [self . _putnext] [self . _getnext])
    (setmember [self . _finish] nil))
  
  (defmethod finish (self)
    (synchronized [self . _mutex]
      (setmember [self . _finish] :t)
      [[self . _cond] broadcast]))
  
  (defmethod has-next (self)
    (synchronized [self . _mutex]
      (while
	  (and (eq [self . _putnext] [self . _getnext])
	    (not [self . _finish]))
       [[self . _cond] wait [self . _mutex]])
      (if (eq [self . _putnext] [self . _getnext])
	  (not [self . _finish])
	  :t)))
  
  (defmethod put (self item)
    (synchronized [self . _mutex]
      (setcar [self . _putnext] item)
      (setcdr [self . _putnext] (cons () ()))
      (setmember [self . _putnext] (cdr [self . _putnext]))
      [[self . _cond] broadcast]))
  
  (defmethod get-or-end (self end-marker)
    (synchronized [self . _mutex]
      (while
	  (and (eq [self . _putnext] [self . _getnext])
	    (not [self . _finish]))
       [[self . _cond] wait [self . _mutex]])
      (if (and (eq [self . _putnext] [self . _getnext])
	       [self . _finish])
	  end-marker
	  (progn
	   (setq ret (car [self . _getnext]))
	   (setmember [self . _getnext] (cdr [self . _getnext]))
	   ret))))
  
  ;; nonblocking
  (defmethod get-or-end-or-nothing (self end-marker nothing-marker)
    (synchronized [self . _mutex]
      (cond ((eq [self . _putnext] [self . _getnext])
	     nothing-marker)
	    ([self . _finish]
	     end-marker)
	    (:else
	     (progn
	      (setq ret (car [self . _getnext]))
	      (setmember [self . _getnext] (cdr [self . _getnext]))
	      ret)))))
  
  (defmethod get (self)
    (synchronized [self . _mutex]
      (while (eq [self . _putnext] [self . _getnext])
	[[self . _cond] wait [self . _mutex]])
      (setq ret (car [self . _getnext]))
      (setmember [self . _getnext] (cdr [self . _getnext]))
      ret)))

;;; queue lock family select (golang style)

;;; EX:
;;; (qlfselect family
;;;    ((var-a ql-a)     ;; (setq var-a [ql-a get])   ;; really get-or-end-or-nothing
;;;     body...)
;;;    ((var-b ql-b)     ;; (setq var-b [ql-b get])   ;;  ''
;;;     body...))

(defmacro qlfselect (family . clauses)
  (with-gensym (end nothing retfun result mtx cnd qls)
      `(progn
	(setq ,mtx (car ,family))
	(setq ,cnd (cdr ,family))
	(setq ,retfun ())
	(setq ,qls (make-dict))
	,@(map (lambda (enclause)
		 `(setf #[,qls ,(reprn (car enclause))]
			,(cadar (cdr enclause))))
	       (enumerate clauses))
	(synchronized ,mtx
	  (while (not ,retfun)
	    (setf ,retfun
		  (cond
		   ,@(map
		      (lambda (enclause)
			(let ((clause (cdr enclause)))
			  `((not (eq (setq ,result
					   [#[,qls ,(reprn (car enclause))] get-or-end-or-nothing ',end ',nothing])
				     ',nothing))
			    (if (eq ,result ',end)
				(throw (list qlfselect-finished-queue "qlfselected on finished queue"))
				(lambda ()
				  ((lambda (,(caar clause))
				     (progn ,@(cdr clause)))
				   ,result))))))
		      (enumerate clauses))))
	    
	    (when (not ,retfun)
	      [,cnd wait ,mtx])))
	(,retfun))))

(defhelp qlfselect "
MACRO qlfselect
EX:
(qlfselect family
   ((var-a ql-a)     ;; like (setq var-a [ql-a get])
    body...)
   ((var-b ql-b)     ;; like (setq var-b [ql-b get])
    body...))

qlfselect stands for queue-lock-family-select.  It only works for
families of queue-locks, which are defined by creating a
queue-lock-family with (setq fmly (make-queue-lock-family)) and
instantiating all queue-locks to be used here with this family:
(new queue-lock fmly)
")

(defun parallel-iterator (fun)
  (setq end-marker (gensym))
  (setq queue (new queue-lock))
  (defun writer-fun ()
    (for-each item (fun)
      [queue put item])
    [queue put end-marker])
  (setq writer-thread (new thread writer-fun))
  (defun reader-fun ()
    (setq res [queue get])
    (if (eq res end-marker)
	(progn
	 [writer-thread join]
	 ())
	(dcons res (reader-fun))))
  [writer-thread run]
  (reader-fun))

(defhelp parallel-iterator
  "FUNCTION parallel-iterator
(parallel-iterator fun)
-> <dynamic list>

example:
(for-each x (PARALLEL-ITERATOR (lambda () (drange 1 4 1))) (write x))
1
2
3
-> ()
")

(defun pmap (nworker fun xs)
  (setq queue (new queue-lock))
  (defun wfun ()
    (when (setq package [queue get-or-end ()])
      (setcar package ((car package)))
      (wfun)))
  (setq workers (map1 (lambda (x) [(new thread wfun x) run]) (drange 0 nworker 1)))
  (setq packages (map1 (lambda (x) (lambda () (fun x))) xs))
  (for-list p packages
    [queue put p])
  [queue finish]
  (for-each w workers
    [w join])
  packages)

(defhelp pmap
  "FUNCTION pmap
(pmap nworker fun xs)
Like map1, applies <fun> to <xs> and returns new list.
Unlike map1, pmap spreads the work to <nworker> threads.
Because of this, <fun> has to be threadsafe
")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro generator (args . body)
  (with-gensym (outqueue innerfun consfun thr end-marker)
      `(lambda x (progn
             (setq ,outqueue (new queue-lock 1))
             (setq ,thr ())
             
             (defun yield (item)
               [,outqueue put item])
             
             (defun ,innerfun ,args
               (finally (progn ,@body)
                        [,outqueue finish]))
             
             (defun ,consfun ()
               (if (!= (setq nxt [,outqueue get-or-end ',end-marker]) ',end-marker)
                   (dcons nxt (,consfun))
                   (progn [,thr join] ())))
             
             (setf ,thr (new thread (lambda () (apply ,innerfun x))))
             [,thr run]
             (,consfun)))))
  
(defmacro defgenerator (name args . body)
  `(setq ,name (generator ,args ,@body)))

(defhelp defgenerator
  "MACRO defgenerator
(defgenerator name (args ...)
  (function like a normal defun-function. but can yield items using (yield <value>)))
  similar to python generators, but realised usings threads

EX:
(defgenerator xrange (from to)
  (setq x from)
  (while (< x to)
    (yield x)
    (incf x)))

(for-each x (xrange 0 10)
  (write x))
")
