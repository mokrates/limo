(mod-load "sdl")

(setq _turtle-surface ([_sdl . sdl-setvideomode] 640 480 24 [_sdl . sdl_hwsurface]))
(setq _turtle-pcolor ([_sdl . sdl-surface-rgbpcolor] _turtle-surface 255 255 255))
(setq _turtle-textcolor ())
(setq _turtle-textfont ())
(setq _turtle-textinitp ())
(defmacro _turtle-with-text body
  `(if _turtle-textinitp
       ,`(progn ,@body)
       (throw "please call (TURTLE-TEXTINIT) to init turtle textfunctions")))

(setq _turtle-x 240)
(setq _turtle-y 320)
(setq _turtle-pi (/ 3141592653589793
                    1000000000000000))
(setq _turtle-pendown :t)
(setq _turtle-direction 0)

;; sin x = gegenkathete / hypothenuse (y-koord)
;; cos x = ankathete    / hypothenuse (x-koord) 

(defun turtle-left (a)
  (setf _turtle-direction (mod (+ _turtle-direction (- 360 a)) 360)))

(defun turtle-right (a)
  (setf _turtle-direction (mod (+ _turtle-direction a) 360)))

(defun turtle-forward (x)
  (let ((newx (+ _turtle-x
                 (* x (cos (/ (* _turtle-direction 2 _turtle-pi) 360)))))
        (newy (+ _turtle-y
                 (* x (sin (/ (* _turtle-direction 2 _turtle-pi) 360))))))
    (when _turtle-pendown
      ([_sdl . sdl-line]
       _turtle-surface
       (cons _turtle-x _turtle-y)
       (cons newx newy)
       _turtle-pcolor))
    ([_sdl . sdl-flip] _turtle-surface)
    (setf _turtle-x newx)
    (setf _turtle-y newy)))

(defun turtle-textinit ()
  ([_sdl . SDL-TTF-INIT ])
  (setf _turtle-textcolor ([_sdl . sdl-makecolor] 255 255 255])
  (setf _turtle-textfont ([_sdl . sdl-ttf-openfont]
                          (string-concat _limo-prefix "DejaVuSansMono.ttf") 12))
  (setf _turtle-textinitp :t))

(defun turtle-write (text)
  (_turtle-with-text
   (let ((surface ([_sdl . sdl-ttf-rendertext-blended]
                   _turtle-textfont
                   text
                   _turtle-textcolor)))
     ([_sdl . sdl-blitsurface] surface _turtle-surface (cons _turtle-x _turtle-y))
     ([_sdl . sdl-flip] _turtle-surface))))
