; -*- scheme -*-

(defun list-rslice (l p)  ; get list from p up
  (if (or (eq p 0) (not l))
      l
      (list-rslice (cdr l) (- p 1))))
(freezeq list-rslice)

(defun list-lslice (l p)  ; get list up to p
  (if (or (not l) (eq p 0))
      ()
      (dcons (car l) (list-lslice (cdr l) (- p 1)))))
(freezeq list-lslice)

(defun list-slice (li lo up)  ;; list, lower, upper
  (list-rslice (list-lslice li up) lo))
(freezeq list-slice)

(defun list-split (l d) ;; list, delimiter
  (defun split-helper (l d inner outer)
    (cond ((not l) (reverse (cons (reverse inner) outer)))
	  ((eq (car l) d) (split-helper (cdr l) d () (cons (reverse inner) outer)))
	  (:else (split-helper (cdr l) d (cons (car l) inner) outer))))
  (split-helper l d () ()))
(freezeq list-split)
