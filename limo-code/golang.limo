;; an incomplete implementation of golangs concurrency with
;; - go-routines 
;; - channels
;; - defer

;; you need to put all use of (go ...) into
;; (with-go-reaper-thread ...)
;; (defer ...) defers to end of
;; (defer-body ...)

(import "threading.limo")
 
;;;;;;;;;;;;;;;;;;;;;;;;;;
;; defer
 
(defmacro defer-scope body
  `(dyn-let ((deferred-functions '()))
            (finally
             (progn ,@body)
             (for-each fun (dyn-getq deferred-functions)
               (fun)))))
 
(defun defer (f . args)
  (dyn-setf deferred-functions (cons (λ () (apply f args))
                                     (dyn-getq deferred-functions))))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; goroutine reaper thread
 
;;; globals
(setq _go-reaper-thread ())
(setq _go-wait-queue ())
 
(defun _go-reaper-thread-fun ()
  (while (!= :end (setq thr [_go-wait-queue get-or-end :end]))
    [thr join]))
 
(defun go-start-reaper-thread ()
  (setf _go-wait-queue (new queue-lock))
  [(setf _go-reaper-thread (new thread _go-reaper-thread-fun)) run])
 
(defun go-stop-reaper-thread ()
  [_go-wait-queue finish]
  [_go-reaper-thread join])
 
(defmacro with-go-reaper-thread body
  `(progn
    (go-start-reaper-thread)
    (finally
     (progn ,@body)
     (go-stop-reaper-thread))))
 
(defun _go-thread-fun (thr f args)
  (apply f args)
  [_go-wait-queue put thr])
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; go
 
(defun go (fun . args)
  (let ((thr (new thread ())))    ;; initialize without function
    (setmember [thr . _fun] (λ () (_go-thread-fun thr fun args)))    ;; put function in later.
    [thr run]))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; channels

(defclass _go-unbuf-queue-lock ()
  (defmethod %init (self)
    (setmember [self . _writelock] (new queue-lock))
    (setmember [self . _queue] (new queue-lock))

  (defmethod put (self item)
    (setq wl [[self . _writelock] get-or-end :end])
    [[queuelock . put] self item]     ;; TODO: ????? [[self . _queue] put item] ??
    (when (!= wl :end)
      (throw "not finished synchronously")))

  (defmethod get (self)               ;; TODO: why not get-or-end?
    [[self . _writelock] put ()]  ;; there is a reader waiting
    [[self . _queue] get]))
  
 
(defun go-make-buf-channel () (new queue-lock))
(defun go-make-channel () (new _go-unbuf-queue-lock))
 
(defun go<- (chan . val)
  (if val
      [chan put (car val)]
      [chan get]))

