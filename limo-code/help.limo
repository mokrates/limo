;;; the variable containing the help-strings

(setq _help-dict (make-dict))

;; use this to define a helpstring for your symbol

(defun defhelp (sym helpstr)
  (dict-set _help-dict (reprn (address-of sym)) helpstr))

;; new defmacro and defun with docstring.
(setq defmacro 
      (macro (name args . body)
        (if (stringp (car body))
            `(progn 
              (setq ,name (macro ,args ,(cons 'progn body)))
              (defhelp ,name ,(car body))
              ,name)
            `(setq ,name (macro ,args ,(cons 'progn body))))))
(freezeq defmacro)

(setq defun
      (macro (name args . body)
        (if (stringp (car body))
            `(progn 
              (setq ,name (lambda ,args ,(cons 'progn body)))
              (defhelp ,name ,(car body))
              ,name)
            `(setq ,name (lambda ,args ,(cons 'progn body))))))
(freezeq defun)

(defun info opt-node-name
  (if opt-node-name
      (system (string-concat "/usr/bin/info " _limo-prefix "/limo-info.info '" (car opt-node-name) "'"))
      (system (string-concat "/usr/bin/info " _limo-prefix "/limo-info.info"))))

;; use this to ask for help
(defun help sym
  (if (not sym)
      (print "
Help for limo
-------------
To request help for a particular symbol or function type
(help <symbol>)
for Example
(help format)

")
      (if (dict-has-key _help-dict (reprn (address-of (car sym))))
	  (print (string-concat (dict-getvalue _help-dict (reprn (address-of (car sym)))) "\n"))
	  (print "Sorry, there is no help on this topic, but there probably should be!\n"))))

;;;;;;;;;;;;;;;;; help for stuff

(defhelp defhelp
  "FUNCTION (defhelp object helpstring)
Defines help for <object> by storing helpstring.
See (help help)
")

(defhelp help
  "FUNCTION (help object)
Lets you request help on <object>.
Example: (help help)
")

(defhelp info
  "FUNCTION info
(info)              Open the Limo Handbook. Requires 'info'
(info \"Introduction\")  Directly open the Chapter 'Introduction'
")

(defhelp mod-load
  "MACRO (mod-load name)
Loads a binary-module which can be compiled in (if (mod-isinline name) is true)
or is loaded as an .so-file.
The name has to be given without the .so-file-extension

Example: (mod-load \"file\")
")

(defhelp gcsetmax
  "BUILTIN (gcsetmax kbytes)
Limo will die if it tries to allocate more than KBYTES memory")

(defhelp format
  "FUNCTION (format formatstring . args)
format formats similar to sprintf in C. It returns a string in which
placeholders get substituted with the args.
At the moment there are only three placeholders:
%s to insert a string
%n to insert a number
%r to insert the representation of data
")

(defhelp with-gensym
  "MACRO with-gensym
(with-gensym (sym1 sym2 ...)
  body)
generates unique symbols with (gensym) and assigns the variables <sym1>, <sym2>... to them
")

(defhelp gensym
  "FUNCTION gensym
generates unique symbols for use in macros
")

(defhelp defclass
  "MACRO defclass
(defclass <classname> <parentclass-or-nil>
  methods...)
defines a class <classname> with <parentclass>. Classes are of Type ENV
see defmethod

example:
(defclass foo ()                 ; defining class
  (defmethod %init (self) ())     ; must exist to instantiate
  (defmethod print-something (self) (print \"foo\\n\"))  ; example-method

  ;; properties are the 'public interface' for data-members
  (defprop   sprop _sprop)        ; define a simple property using data-member _sprop
  (defmethod cprop (self . value) ; define a complex property
    (if value             ;; value is empty list, if no 
        (if (< (car value) 5)     ;; do some checking
            (setmember [self . _cprop] (car value)) ;; setting the value
            (throw 'what-did-you-think))
        [self . _cprop])))         ;; no second argument given, return value of propery

(setq bar (new foo))             ; instantiate
[bar print-something]            ; method-call
(set-member [bar . baz] \"quux\") ; setting a member
[bar . baz] -> \"quux\"           ; reading a member

;; setting a property, first way
[bar sprop \"bacon\"]
;; reading the property
[bar sprop] -> \"bacon\"

;; setting a property, second way
(setf [bar sprop] \"eggs\")
;; reading
[bar sprop] -> \"eggs\"

;; setting a complex property
λimo > (setf [bar cprop] 6)

UNHANDLED EXCEPTION CAUGHT
\"file: *READLINE*, line: 1, col: 13\"
  (THROW (QUOTE WHAT-DID-YOU-THINK))
WHAT-DID-YOU-THINK

;; setting a complex property next try
λimo > (setf [bar cprop] 4)
-> 4

;; reading the complex property
λimo > [bar cprop]
-> 4

see defmethod.

SYMBOL defmethod
(defmethod (args...) body)
The <args> can be used like in a lambda (see lambda)
Methods work similar to like they work in python.
see defclass

")

(defhelp instancep
  "FUNCTION instancep
(is-instance <class> <object-or-class>)
true if <object-or-class> is an object or a subclass of class <class>
")

(defhelp for-each
  "MACRO for-each
(for-each item list
  [ :continuable ] [ :breakable ]
  body...)
Executes <body> for each <item> in <list>

If :continueable is used, the for-each loop may be (continue)d.
If :breakable is used, the for-each loop may be (break)ed.
") 

(defhelp cond
  "MACRO cond
(cond (<condition> <body>)
      (<condition> <body>)  ;; as many as you want
      (:default    <body>)) ;; optional
Executes the first clause where condition is true
")

(defhelp ycomb
  "FUNCTION ycomb
y-combinator
(ycomb (lambda (selfn args...)
            body with args..., recurring on selfn))
-> the lambda function itself, with selfn as itself for recurring
")

(defhelp block
  "BUILTIN block
(block label
  (progn 
    (write 'a)
    (return-from label :optional-return-value)
    (write 'b)))
writes only A.
Caution: BLOCK creates a subscope
")

(defhelp return-from
  "BUILTIN return-from
see BLOCK
")

(defhelp assoc
  "FUNCTION assoc
Accessor function for association lists. Examples:

λimo > (assoc :foo '((\"key\" . \"value\") (:foo . :bar)))
-> (:FOO . :BAR)
λimo > (assoc \"key\" '((\"key\" . \"value\") (:foo . :bar)))
-> (\"key\" . \"value\")
λimo > (assoc 'bla '((\"key\" . \"value\") (:foo . :bar)))
-> ()
")

(defhelp setq
  "BUILTIN setq
Assign to variable in current scope.

Cannot be used if a variable under the same name defined in an enclosing scope
has been read in the current scope. Returns assigned value.

Examples:
(setq foo 123)
foo
-> 123

(setq bar (+ 3 4))
bar
-> 7
")

(defhelp setf
  "MACRO setf
Assign to existing variable or place.
To define places to assign to, check REGISTER-PLACE-SETTER

Examples:
(setq foo 5)
(setf foo 123)
foo
-> 123

(setq foo '(1 2 3 4 5))
(setf (nth 2 foo) 'hallo)
foo
->
(1 2 HALLO 4 5)
")

(defhelp set-finalizer
  "BUILTIN (set-finalizer <obj> <fin>)
Register a finalizer to be executed when obj is collected by
the garbage collector. Returns the last finalizer set.
Function fin doesn't get any arguments (use a closure if you
need any data there)
")

(defhelp do
  "MACRO do 
SYNTAX: (do ((VAR1 INIT1 STEP1) ...)
             (STOP-COND RESULT)
             BODY)

EX:
(do ((x 0 (+ x 1))     ;; VAR1
     (y 0 (+ y x)))    ;; VAR2
    ((= x 5) y)       ;; STOP-COND and RESULT
    (print (format \"x=%n y=%n\\n\" x y)))   ;; BODY
x=0 y=0
x=1 y=0
x=2 y=1
x=3 y=3
x=4 y=6
-> 10
")

(defhelp if
  "MACRO (if <cond> <then> <else>)
EX: (if (= x 3) \"x equals three!\" \"sadly, x is not three...\")
<then> is only evaluated, if the <cond> is true, <else> only if <cond> is false.

The macro reorders if-clauses, if the condition consists of NOT, AND, and OR 
for efficiency reasons.")

(defhelp sym-no-opt
  "BUILTINFUN (sym-no-opt <sym>)
EX: (defmacro foo (x)
      (sym-no-opt x)
      `(defun (,x) ...))

If you build macros with dynamic symbols as parameters, you should
disable optimization, or weirdness will ensue, most likely the
interpreter will segfault. 

GENSYM and WITH-GENSYM does this automatically for generated syms.
See examples/lcache-debug.limo.
")
