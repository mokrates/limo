;;; the variable containing the help-strings

(setq _help-dict (make-dict))

;; use this to define a helpstring for your symbol

(defun defhelp (sym helpstr)
  (dict-set _help-dict (reprn (address-of sym)) helpstr))

;; use this to ask for help
(defun help sym
  (if (not sym)
      (print "
Help for limo
-------------
To request help for a particular symbol or function type
(help <symbol>)
for Example
(help format)

")
      (if (dict-has-key _help-dict (reprn (address-of (car sym))))
	  (print (dict-getvalue _help-dict (reprn (address-of (car sym)))))
	  (print "Sorry, there is no help on this topic, but there probably should be!\n"))))

;;;;;;;;;;;;;;;;; help for stuff

(defhelp defhelp
  "FUNCTION (defhelp object helpstring)
Defines help for <object> by storing helpstring.
See (help help)
")

(defhelp help
  "FUNCTION (help object)
Lets you request help on <object>.
Example: (help help)
")

(defhelp mod-load
  "MACRO (mod-load name)
Loads a binary-module which can be compiled in (if (mod-isinline name) is true)
or is loaded as an .so-file.
The name has to be given without the .so-file-extension

Example: (mod-load \"file\")
")

(defhelp format
  "FUNCTION (format formatstring . args)
format formats similar to sprintf in C. It returns a string in which
placeholders get substituted with the args.
At the moment there are only three placeholders:
%s to insert a string
%n to insert a number
%r to insert the representation of data
")

(defhelp with-gensym
  "MACRO with-gensym
(with-gensym (sym1 sym2 ...)
  body)
generates unique symbols with (gensym) and assigns the variables <sym1>, <sym2>... to them
")

(defhelp gensym
  "FUNCTION gensym
generates unique symbols for use in macros
")

(defhelp defclass
  "MACRO defclass
(defclass <classname> <parentclass-or-nil>
  methods...)
defines a class <classname> with <parentclass>. Classes are of Type ENV
see defmethod

example:
(defclass foo ()                 ; defining class
  (defmethod init (self) ())     ; must exist to instantiate
  (defmethod print-something (self) (print \"foo\\n\")))  ; example-method
(setq bar (new foo))             ; instantiate
[foo print-something]            ; method-call
(set-member [foo . bar] \"baz\") ; setting a member
[foo . bar] -> \"baz\"           ; reading a member

see defmethod.

SYMBOL defmethod
(defmethod (args...) body)
The <args> can be used like in a lambda (see lambda)
Methods work similar to like they work in python.
see defclass

")

(defhelp instancep
  "FUNCTION instancep
(is-instance <class> <object-or-class>)
true if <object-or-class> is an object or a subclass of class <class>
")

(defhelp for-each
  "MACRO for-each
(for-each item list
  body...)
Executes <body> for each <item> in <list>
") 

(defhelp cond
  "MACRO cond
(cond (<condition> <body>)
      (<condition> <body>)  ;; as many as you want
      (:default    <body>)) ;; optional
Executes the first clause where condition is true
")

(defhelp block
  "BUILTIN block
(block label
  (progn 
    (write 'a)
    (return-from label :optional-return-value)
    (write 'b)))
writes only A.
Caution: BLOCK creates a subscope
")

(defhelp return-from
  "BUILTIN return-from
see BLOCK
")

(defhelp assoc
  "FUNCTION assoc
Accessor function for association lists. Examples:

λimo > (assoc :foo '((\"key\" . \"value\") (:foo . :bar)))
-> (:FOO . :BAR)
λimo > (assoc \"key\" '((\"key\" . \"value\") (:foo . :bar)))
-> (\"key\" . \"value\")
λimo > (assoc 'bla '((\"key\" . \"value\") (:foo . :bar)))
-> ()
")

(defhelp setq
  "BUILTIN setq
Assign to variable in current scope.

Cannot be used if a variable under the same name defined in an enclosing scope
has been read in the current scope. Returns assigned value.

Examples:
(setq foo 123)
foo
-> 123

(setq bar (+ 3 4))
bar
-> 7
")

(defhelp setf
  "MACRO setf
Assign to existing variable or place.
To define places to assign to, check REGISTER-PLACE-SETTER

Examples:
(setq foo 5)
(setf foo 123)
foo
-> 123

(setq foo '(1 2 3 4 5))
(setf (nth 2 foo) 'hallo)
foo
->
(1 2 HALLO 4 5)
")
