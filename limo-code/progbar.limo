(unify
 (progress-bar-wt progress-bar-w)
 (scope
  (setq progbarcounter 0)
  (defun progress-bar-x (it width pbc total lastepoch pos)
    (if it
        (progn
         (when (!= (car (time)) lastepoch)
           (for-each x (drange 0 pbc 1)
             (print (format "%s[E" (chr 27)))) ;; go down
           
           (setq spinner (format "[%s] " (string-nth (mod lastepoch 4) "-\\|/")))
           (setq numbers (format "(%n/%n) " pos total))
           (setq left-bar-margin "[")
           (setq right-bar-margin "] ")
           (setq bar-width (- width
                              (string-length
                               (string-concat spinner
                                              numbers
                                              left-bar-margin
                                              right-bar-margin))))
           (setq nfilled (floor (/ (* pos bar-width) total)))
           (print (list-to-string (list spinner
                                        numbers
                                        left-bar-margin
                                        (list-to-string (map (lambda (x) "#")
                                                             (drange 0 nfilled 1)))
                                        (list-to-string (map (lambda (x) ".")
                                                             (drange 0
                                                                     (- bar-width nfilled) 1)))
                                        right-bar-margin
                                        "\r")))
           (file-flush stdout)
           (for-each x (drange 0 pbc 1)
             (print (format "%s[F" (chr 27))))) ;; go up
         (setq thisepoch (car (time)))
         (dcons (car it) (progress-bar-x (cdr it) width pbc total thisepoch (+ pos 1))))
        (progn
	 (decf progbarcounter)
	 ())))
  
  (defun progress-bar-wt (it width total)
    (let ((pbc progbarcounter))
      (incf progbarcounter)
      (progress-bar-x it width pbc total 0 0)))
  
  (defun progress-bar-w (it width)
    (let ((pbc progbarcounter))
      (incf progbarcounter)
      (progress-bar-x it width pbc (list-length it) 0 0)))
  
  (list progress-bar-wt progress-bar-w)))
