(unify
 (progress-bar-wt progress-bar-w progress-bar-t progress-bar progbar-print)
 (scope
  (setq progbarcounter 0)

  (defun progbar-print (x)
    (for-each spl (string-split x "\n")
      (for-each x (drange 1 progbarcounter 1)
        (print (format "%s[E" (chr 27)))) ;; go down
      (print "\n")
      (for-each x (drange 0 progbarcounter 1)
        (print (format "%s[F" (chr 27))))  ;; go up
      (print (format "%s[L" (chr 27)))     ;; insert line  (move progbars down)
      (print spl)
      (print "\n")))
    
  (defun progress-bar-x (it width pbc total lastepoch pos)
    (if it
        (progn
         (when (!= (car (time)) lastepoch)
           (for-each x (drange 0 pbc 1)
             (print (format "%s[E" (chr 27)))) ;; go down
           
           (setq spinner (format "[%s] " (string-nth (mod lastepoch 4) "-\\|/")))
           (setq numbers (format "(%n/%n) " pos total))
           (setq left-bar-margin "[")
           (setq right-bar-margin "] ")
           (setq bar-width (- width
                              (string-length
                               (string-concat spinner
                                              numbers
                                              left-bar-margin
                                              right-bar-margin))))
           (setq nfilled (floor (/ (* pos bar-width) total)))
           (print (list-to-string (list spinner
                                        numbers
                                        left-bar-margin
                                        (list-to-string (map (lambda (x) "#")
                                                             (drange 0 nfilled 1)))
                                        (list-to-string (map (lambda (x) ".")
                                                             (drange 0
                                                                     (- bar-width nfilled) 1)))
                                        right-bar-margin
                                        "\r")))
           (for-each x (drange 0 pbc 1)
             (print (format "%s[F" (chr 27))))) ;; go up
         (file-flush stdout)
         (setq thisepoch (car (time)))
         (dcons (car it) (progress-bar-x (cdr it) width pbc total thisepoch (+ pos 1))))
        (progn  ;; end of iterator reached.
         
         (for-each x (drange 0 pbc 1)
           (print (format "%s[E" (chr 27)))) ;; go down
         (print (format "%s[2K" (chr 27)))  ;; erase line
         (for-each x (drange 0 pbc 1)
           (print (format "%s[F" (chr 27)))) ;; go up
        
	 (decf progbarcounter)
         (file-flush stdout)
	 ())))
  
  (defun progress-bar-wt (it width total)
    (for-each x (drange 1 progbarcounter 1)
      (print (format "%s[E" (chr 27)))) ;; go down
    (print (format "\n")) ;; go up
    (for-each x (drange 0 progbarcounter 1)
      (print (format "%s[F" (chr 27)))) ;; go up
  
    (let ((pbc progbarcounter))
      (incf progbarcounter)
      (progress-bar-x it width pbc total 0 0)))
  
  (defun progress-bar-w (it width)
    (for-each x (drange 1 progbarcounter 1)
      (print (format "%s[E" (chr 27)))) ;; go down
    (print (format "\n")) ;; go up
    (for-each x (drange 0 progbarcounter 1)
      (print (format "%s[F" (chr 27)))) ;; go up
  
    (let ((pbc progbarcounter))
      (incf progbarcounter)
      (progress-bar-x it width pbc (list-length it) 0 0)))

  (defun progress-bar-t (it total)
    (progress-bar-wt it 80 total))

  (defun progress-bar (it)
    (progress-bar-w it 80))

  (list progress-bar-wt progress-bar-w progress-bar-t progress-bar progbar-print)))
