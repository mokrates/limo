(unify (from-hex to-hex)
       (scope

        (setq hexdigits (string-to-list "0123456789abcdef"))
        (setq hexdigit-d (dict (map cons
                                    hexdigits
                                    (drange 0 16 1))))
        (for-each kvp '(("A" . 10) ("B" . 11) ("C" . 12) ("D" . 13) ("E" . 14) ("F" . 15))
          (dict-set hexdigit-d (car kvp) (cdr kvp)))

        (defun from-hex (hex)
          (setq res 0)
          (for-each c (string-to-list hex)
            (setf res (* 16 res))
            (incf res (dict-getvalue hexdigit-d c)))
          res)

        (defun to-hex (num)
          (setq hex "")
          (while (!= num 0)
            (unify (d rest) (idivmod num 16))
            (setf hex (string-concat (nth rest hexdigits) hex))
            (setf num d))
          (if (> (string-length hex) 0)
              hex
              "0"))

        (defun my-hex-reader (rs)
          (setq str "")
          (setq c "")
          (while (member (setf c (reader-stream-getc rs))
                         (string-to-list "0123456789ABCDEFabcdef"))
            (setf str (string-concat str c)))
          (reader-stream-ungetc rs c)
          (list (from-hex str)))

        (dict-set *readtable* "x" my-hex-reader)

        (list from-hex to-hex)))
