;;;; so, this should be reworked, but it was enough for tetris

(mod-load "ncurses")

(defclass screen ()
  (defmethod %init (self scr)
    (setmember [self . _scr] scr))
  (defmethod keypad (self onoff)
    ([_ncurses . keypad] [self . _scr] onoff))
  (defmethod move (self y x)
    ([_ncurses . wmove] [self . _scr] y x))
  (defmethod addch (self c)
    ([_ncurses . waddch] [self . _scr] c))
  (defmethod refresh (self)
    ([_ncurses . wrefresh] [self . _scr]))
  (defmethod getch (self)
    ([_ncurses . wgetch] [self . _scr]))
  (defmethod erase (self)
    ([_ncurses . werase] [self . _scr]))
  (defmethod print-with-attr (self str attr)
    (for-each c (string-to-list str)
      [self addch (+ (ord c) attr)]))
  (defmethod nodelay (self bf)
    ([_ncurses . nodelay] [self . _scr] bf))
  (defmethod halfdelay (self tenths)
    ([_ncurses . halfdelay] tenths))
  (defmethod getmaxyx (self)
    ([_ncurses . getmaxyx] [self . _scr])))

(defun ncurses-init ()
  (let ((scr ([_ncurses . initscr])))
    ([_ncurses . cbreak])
    ([_ncurses . noecho])
    ([_ncurses . keypad] scr :t)
    scr))

(defun ncurses-init-default-color-pairs ()
  "initialize 256 color pairs with the standard CGA colors"
  ([_ncurses . start-color])
  (for-each bg (mdrange 16)
    (for-each fg (mdrange 16)
      ([_ncurses . init-pair] (+ (* 16 bg) fg) fg bg))))

(defun ncurses-default-color-pair (fg bg)
  "return the pair number associated with the fg and bg
combination. assumes ncurses-init-default-color-pairs was called
before"
  (+ (* 16 bg) fg))
