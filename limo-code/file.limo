; -*- scheme -*-

(mod-load "file")

(defun file-readline (f)
  (defun file-readline-list (f)
    (setq c (file-getc f))
    (cond ((eq c "\n") '("\n"))
	  ((eq c "") '(""))
	  (:else (dcons c (file-readline-list f)))))

  (reduce string-concat (file-readline-list f)))

(defhelp file-readline
  "FUNCTION (file-readline file)
reads and returns one line out of <file>")

(defun file-readlines (f)
  (setq l (file-readline f))
  (if (eq l "")
      ()
      (dcons l (file-readlines f))))

(defhelp file-readlines
  "FUNCTION (file-readlines file)
returns the complete file in a dynamic list of lines
")

(defmacro with-file-open (filename mode f . body)
  ,`(finally
     ,`(progn
	,`(setq ,f ,`(file-open ,filename ,mode))
	,@body)
     ,`(file-close ,f)))

(defhelp with-file-open
  "MACRO (with-file-open filename mode f . body)
Opens <filename> as file <f> and executed body.
After execution, <f> will be closed
")

(setq stdin (file-fdopen 0 "r"))
(setq stdout (file-fdopen 1 "w"))
(setq stderr (file-fdopen 2 "w"))
(defun print x
  (cond ((cdr x) ; multiple parameters
	 (file-write (car x) (cadr x)))
	(:else
	 (file-write stdout (car x)))))
(defhelp print
  "FUNCTION (print [file] string)
Prints <string> to <file> if file is given, or else to stdout.
")
