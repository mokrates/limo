; -*- scheme -*-

(mod-load "string_builtins")

(setq string-concat
	   (scope
	    (setq _builtin-string-concat string-concat)
	    (lambda x
	      (reduce _builtin-string-concat (cons "" x)))))

(defun list-to-string (l)
  (apply string-concat l))

(defun string-to-list (s)
  (setq l (string-length s))
  (defun string-to-list-helper (s p)  ;; string , pos
    (if (< p l)
	(dcons (string-nth p s) (string-to-list-helper s (+ 1 p)))
	()))
  (string-to-list-helper s 0))

(unify (string-lstrip string-rstrip string-strip)
       (scope 
	(defun list-lstrip (l)
	  (when l
		(setq c (car l))
		(if (or (eq c " ") (eq c "\t") (eq c "\n") (eq c "\r"))
		    (list-lstrip (cdr l))
		    l)))
	
	(setq string-lstrip
	  (comp list-to-string list-lstrip string-to-list))
	
	(setq string-rstrip
	  (comp list-to-string reverse list-lstrip reverse string-to-list))
	
	(setq string-strip
	  (comp list-to-string reverse list-lstrip reverse list-lstrip string-to-list))
	
	(list string-lstrip string-rstrip string-strip)))
(setq string-lstrip string-lstrip)
(setq string-rstrip string-rstrip)
(setq string-strip string-strip)

(defun string-slice (s l u)  ; string, lower, upper
  (list-to-string (list-slice (string-to-list s) l u)))

(defun string-split (s d)
  (map list-to-string (list-split (string-to-list s) d)))

(defclass string@ ()      ; string-class
  (defmethod init (self s)
    (setmember [self . _s] s))
  (defmethod @ (self)     ; unbox
    [self . _s])
  (defmethod tostring (self)
    [self . _s])

  ;; strips
  (defmethod strip (self)
    (string-strip [self . _s]))
  (defmethod lstrip (self)
    (string-lstrip [self . _s]))
  (defmethod rstrip (self)
    (string-rstrip [self . _s]))

  (defmethod slice (self l u)
    (string-slice [self . _s] l u))
  (defmethod split (self d)
    (string-split [self . _s] d))
  (defmethod format (self . rest)
    (apply format (cons [self . _s] rest))))

(defun string-join (sep l)
  (defun helper (sep l)
    (if (not l)
        ()
        (dcons sep (dcons (car l) (helper sep (cdr l))))))
        
  (if (not l)
      ()
      (list-to-string (dcons (car l) (helper sep (cdr l))))))
