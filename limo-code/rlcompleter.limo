(mod-load "rlcompleter")
(mod-load "regex")

(defun simple-completer (text)
  (defun upcase-str (str)
    (defun upcase (char)
      (if (and (>= (ord char) (ord "a"))
	       (<= (ord char) (ord "z")))
	  (chr (- (+ (ord char) (ord "A")) (ord "a")))
	  char))
    (list-to-string
     (map upcase (string-to-list str))))

  (defun globalenv (cu)
    (if (car (env-extract cu))
	(globalenv (car (env-extract cu)))
	cu))
  
  (defun string-startswith (pre str)
    (eq (string-slice str 0 (string-length pre)) pre))
    
  (setq lword (car (regex-match "[[:alnum:]$*-_/+~%&]*$" text (dict-getvalue regex-const 'reg_extended) 0)))
  (setq prefix (string-slice text 0 (- (string-length text) (string-length lword))))
  (map (curry string-concat prefix)
       (filter (curry string-startswith (upcase-str lword))
	       (map (lambda (x) (symbol-to-string (car x)))
		    (dict-to-list (cdr (env-extract (globalenv (env-current )))))))))

(defun limo-rl-completer (text)
  (defun upcase-str (str)
    (defun upcase (char)
      (if (and (>= (ord char) (ord "a"))
	       (<= (ord char) (ord "z")))
	  (chr (- (+ (ord char) (ord "A")) (ord "a")))
	  char))
    (list-to-string
     (map upcase (string-to-list str))))

  (defun globalenv (cu)
    (if (car (env-extract cu))
	(globalenv (car (env-extract cu)))
	cu))
  
  (defun string-startswith (pre str)
    (eq (string-slice str 0 (string-length pre)) pre))
  
  (setq glenv (globalenv (env-current)))
  (defun getenv (sym)
    (setq d (cdr (env-extract glenv)))
    (if (and (dict-has-key d sym)
	     (envp (dict-getvalue d sym)))
	(dict-getvalue d sym)
	()))
  
  (defun allsyms (env)
    (if env
	(append (map (lambda (x) (car x))
		     (dict-to-list (cdr (env-extract env))))
		(allsyms (car (env-extract env))))
	()))
  
  (setq res nil)
  
  (setq br-match-obj (regex-match "\\[\\s*([[:alnum:]$*-_/+~%&]*)$" text (dict-getvalue regex-const 'reg_extended) 0))
  (setq br-dot (regex-match "\\[\\s*([[:alnum:]$*-_/+~%&]*)\\s+\\.$" text (dict-getvalue regex-const 'reg_extended) 0))
  (setq br-match (regex-match "\\[\\s*([[:alnum:]$*-_/+~%&]*)\\s+(\\.\\s)?\\s*([[:alnum:]$*-_/+~%&]*)$"
			      text (dict-getvalue regex-const 'reg_extended) 0))

  (cond (br-match-obj      ;; complete [incompl...
	 (setq lword (cadr br-match-obj))
	 (setq prefix (string-slice text 0 (- (string-length text) (string-length lword))))
	 (setq sym-list (map (lambda (x) (car x))
			     (dict-to-list (cdr (env-extract (globalenv (env-current)))))))
	 (map (curry string-concat prefix)
	      (filter (curry string-startswith (upcase-str lword))
		      (map (lambda (x) (symbol-to-string x))
			   (filter getenv sym-list)))))
	(br-dot
	 (list text))
	(br-match            ;; complete '[env' and '[env . incompl...'
	 (setq lword (cadr br-match))
	 (cond ((= (list-length br-match) 3)
		(setq rword (caddr br-match)))
	       ((= (list-length br-match) 4)
		(setq rword (caddr (cdr br-match))))
	       (:t (setq rword "")))
	 (setq prefix (string-slice text 0 (- (string-length text) (string-length rword))))

	 (when (setq theenv (getenv (make-sym lword)))
	   (map (curry string-concat prefix)
		(filter (curry string-startswith (upcase-str rword))
			(map (lambda (x) (symbol-to-string x))
			     (allsyms theenv))))))
    
	(:t       ;; complete the rest
	 (setq lword (car (regex-match "[[:alnum:]$*-_/+~%&]*$" text (dict-getvalue regex-const 'reg_extended) 0)))
	 (setq prefix (string-slice text 0 (- (string-length text) (string-length lword))))
	 (map (curry string-concat prefix)
	      (filter (curry string-startswith (upcase-str lword))
		      (map (lambda (x) (symbol-to-string (car x)))
			   (dict-to-list (cdr (env-extract glenv)))))))))
  
  
;;(set-rlcompleter (cons simple-completer ""))
(set-rlcompleter (cons limo-rl-completer ""))
